{
  "version": 3,
  "sources": ["../../filepond-plugin-image-preview/dist/filepond-plugin-image-preview.esm.js"],
  "sourcesContent": ["/*!\r\n * FilePondPluginImagePreview 4.6.12\r\n * Licensed under MIT, https://opensource.org/licenses/MIT/\r\n * Please visit https://pqina.nl/filepond/ for details.\r\n */\r\n\r\n/* eslint-disable */\r\n\r\n// test if file is of type image and can be viewed in canvas\r\nconst isPreviewableImage = file => /^image/.test(file.type);\r\n\r\nconst vectorMultiply = (v, amount) => createVector(v.x * amount, v.y * amount);\r\n\r\nconst vectorAdd = (a, b) => createVector(a.x + b.x, a.y + b.y);\r\n\r\nconst vectorNormalize = v => {\r\n  const l = Math.sqrt(v.x * v.x + v.y * v.y);\r\n  if (l === 0) {\r\n    return {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n  }\r\n  return createVector(v.x / l, v.y / l);\r\n};\r\n\r\nconst vectorRotate = (v, radians, origin) => {\r\n  const cos = Math.cos(radians);\r\n  const sin = Math.sin(radians);\r\n  const t = createVector(v.x - origin.x, v.y - origin.y);\r\n  return createVector(\r\n    origin.x + cos * t.x - sin * t.y,\r\n    origin.y + sin * t.x + cos * t.y\r\n  );\r\n};\r\n\r\nconst createVector = (x = 0, y = 0) => ({ x, y });\r\n\r\nconst getMarkupValue = (value, size, scalar = 1, axis) => {\r\n  if (typeof value === 'string') {\r\n    return parseFloat(value) * scalar;\r\n  }\r\n  if (typeof value === 'number') {\r\n    return value * (axis ? size[axis] : Math.min(size.width, size.height));\r\n  }\r\n  return;\r\n};\r\n\r\nconst getMarkupStyles = (markup, size, scale) => {\r\n  const lineStyle = markup.borderStyle || markup.lineStyle || 'solid';\r\n  const fill = markup.backgroundColor || markup.fontColor || 'transparent';\r\n  const stroke = markup.borderColor || markup.lineColor || 'transparent';\r\n  const strokeWidth = getMarkupValue(\r\n    markup.borderWidth || markup.lineWidth,\r\n    size,\r\n    scale\r\n  );\r\n  const lineCap = markup.lineCap || 'round';\r\n  const lineJoin = markup.lineJoin || 'round';\r\n  const dashes =\r\n    typeof lineStyle === 'string'\r\n      ? ''\r\n      : lineStyle.map(v => getMarkupValue(v, size, scale)).join(',');\r\n  const opacity = markup.opacity || 1;\r\n  return {\r\n    'stroke-linecap': lineCap,\r\n    'stroke-linejoin': lineJoin,\r\n    'stroke-width': strokeWidth || 0,\r\n    'stroke-dasharray': dashes,\r\n    stroke,\r\n    fill,\r\n    opacity\r\n  };\r\n};\r\n\r\nconst isDefined = value => value != null;\r\n\r\nconst getMarkupRect = (rect, size, scalar = 1) => {\r\n  let left =\r\n    getMarkupValue(rect.x, size, scalar, 'width') ||\r\n    getMarkupValue(rect.left, size, scalar, 'width');\r\n  let top =\r\n    getMarkupValue(rect.y, size, scalar, 'height') ||\r\n    getMarkupValue(rect.top, size, scalar, 'height');\r\n  let width = getMarkupValue(rect.width, size, scalar, 'width');\r\n  let height = getMarkupValue(rect.height, size, scalar, 'height');\r\n  let right = getMarkupValue(rect.right, size, scalar, 'width');\r\n  let bottom = getMarkupValue(rect.bottom, size, scalar, 'height');\r\n\r\n  if (!isDefined(top)) {\r\n    if (isDefined(height) && isDefined(bottom)) {\r\n      top = size.height - height - bottom;\r\n    } else {\r\n      top = bottom;\r\n    }\r\n  }\r\n\r\n  if (!isDefined(left)) {\r\n    if (isDefined(width) && isDefined(right)) {\r\n      left = size.width - width - right;\r\n    } else {\r\n      left = right;\r\n    }\r\n  }\r\n\r\n  if (!isDefined(width)) {\r\n    if (isDefined(left) && isDefined(right)) {\r\n      width = size.width - left - right;\r\n    } else {\r\n      width = 0;\r\n    }\r\n  }\r\n\r\n  if (!isDefined(height)) {\r\n    if (isDefined(top) && isDefined(bottom)) {\r\n      height = size.height - top - bottom;\r\n    } else {\r\n      height = 0;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: left || 0,\r\n    y: top || 0,\r\n    width: width || 0,\r\n    height: height || 0\r\n  };\r\n};\r\n\r\nconst pointsToPathShape = points =>\r\n  points\r\n    .map((point, index) => `${index === 0 ? 'M' : 'L'} ${point.x} ${point.y}`)\r\n    .join(' ');\r\n\r\nconst setAttributes = (element, attr) =>\r\n  Object.keys(attr).forEach(key => element.setAttribute(key, attr[key]));\r\n\r\nconst ns = 'http://www.w3.org/2000/svg';\r\nconst svg = (tag, attr) => {\r\n  const element = document.createElementNS(ns, tag);\r\n  if (attr) {\r\n    setAttributes(element, attr);\r\n  }\r\n  return element;\r\n};\r\n\r\nconst updateRect = element =>\r\n  setAttributes(element, {\r\n    ...element.rect,\r\n    ...element.styles\r\n  });\r\n\r\nconst updateEllipse = element => {\r\n  const cx = element.rect.x + element.rect.width * 0.5;\r\n  const cy = element.rect.y + element.rect.height * 0.5;\r\n  const rx = element.rect.width * 0.5;\r\n  const ry = element.rect.height * 0.5;\r\n  return setAttributes(element, {\r\n    cx,\r\n    cy,\r\n    rx,\r\n    ry,\r\n    ...element.styles\r\n  });\r\n};\r\n\r\nconst IMAGE_FIT_STYLE = {\r\n  contain: 'xMidYMid meet',\r\n  cover: 'xMidYMid slice'\r\n};\r\n\r\nconst updateImage = (element, markup) => {\r\n  setAttributes(element, {\r\n    ...element.rect,\r\n    ...element.styles,\r\n    preserveAspectRatio: IMAGE_FIT_STYLE[markup.fit] || 'none'\r\n  });\r\n};\r\n\r\nconst TEXT_ANCHOR = {\r\n  left: 'start',\r\n  center: 'middle',\r\n  right: 'end'\r\n};\r\n\r\nconst updateText = (element, markup, size, scale) => {\r\n  const fontSize = getMarkupValue(markup.fontSize, size, scale);\r\n  const fontFamily = markup.fontFamily || 'sans-serif';\r\n  const fontWeight = markup.fontWeight || 'normal';\r\n  const textAlign = TEXT_ANCHOR[markup.textAlign] || 'start';\r\n\r\n  setAttributes(element, {\r\n    ...element.rect,\r\n    ...element.styles,\r\n    'stroke-width': 0,\r\n    'font-weight': fontWeight,\r\n    'font-size': fontSize,\r\n    'font-family': fontFamily,\r\n    'text-anchor': textAlign\r\n  });\r\n\r\n  // update text\r\n  if (element.text !== markup.text) {\r\n    element.text = markup.text;\r\n    element.textContent = markup.text.length ? markup.text : ' ';\r\n  }\r\n};\r\n\r\nconst updateLine = (element, markup, size, scale) => {\r\n  setAttributes(element, {\r\n    ...element.rect,\r\n    ...element.styles,\r\n    fill: 'none'\r\n  });\r\n\r\n  const line = element.childNodes[0];\r\n  const begin = element.childNodes[1];\r\n  const end = element.childNodes[2];\r\n\r\n  const origin = element.rect;\r\n\r\n  const target = {\r\n    x: element.rect.x + element.rect.width,\r\n    y: element.rect.y + element.rect.height\r\n  };\r\n\r\n  setAttributes(line, {\r\n    x1: origin.x,\r\n    y1: origin.y,\r\n    x2: target.x,\r\n    y2: target.y\r\n  });\r\n\r\n  if (!markup.lineDecoration) return;\r\n\r\n  begin.style.display = 'none';\r\n  end.style.display = 'none';\r\n\r\n  const v = vectorNormalize({\r\n    x: target.x - origin.x,\r\n    y: target.y - origin.y\r\n  });\r\n\r\n  const l = getMarkupValue(0.05, size, scale);\r\n\r\n  if (markup.lineDecoration.indexOf('arrow-begin') !== -1) {\r\n    const arrowBeginRotationPoint = vectorMultiply(v, l);\r\n    const arrowBeginCenter = vectorAdd(origin, arrowBeginRotationPoint);\r\n    const arrowBeginA = vectorRotate(origin, 2, arrowBeginCenter);\r\n    const arrowBeginB = vectorRotate(origin, -2, arrowBeginCenter);\r\n\r\n    setAttributes(begin, {\r\n      style: 'display:block;',\r\n      d: `M${arrowBeginA.x},${arrowBeginA.y} L${origin.x},${origin.y} L${\r\n        arrowBeginB.x\r\n      },${arrowBeginB.y}`\r\n    });\r\n  }\r\n\r\n  if (markup.lineDecoration.indexOf('arrow-end') !== -1) {\r\n    const arrowEndRotationPoint = vectorMultiply(v, -l);\r\n    const arrowEndCenter = vectorAdd(target, arrowEndRotationPoint);\r\n    const arrowEndA = vectorRotate(target, 2, arrowEndCenter);\r\n    const arrowEndB = vectorRotate(target, -2, arrowEndCenter);\r\n\r\n    setAttributes(end, {\r\n      style: 'display:block;',\r\n      d: `M${arrowEndA.x},${arrowEndA.y} L${target.x},${target.y} L${\r\n        arrowEndB.x\r\n      },${arrowEndB.y}`\r\n    });\r\n  }\r\n};\r\n\r\nconst updatePath = (element, markup, size, scale) => {\r\n  setAttributes(element, {\r\n    ...element.styles,\r\n    fill: 'none',\r\n    d: pointsToPathShape(\r\n      markup.points.map(point => ({\r\n        x: getMarkupValue(point.x, size, scale, 'width'),\r\n        y: getMarkupValue(point.y, size, scale, 'height')\r\n      }))\r\n    )\r\n  });\r\n};\r\n\r\nconst createShape = node => markup => svg(node, { id: markup.id });\r\n\r\nconst createImage = markup => {\r\n  const shape = svg('image', {\r\n    id: markup.id,\r\n    'stroke-linecap': 'round',\r\n    'stroke-linejoin': 'round',\r\n    opacity: '0'\r\n  });\r\n  shape.onload = () => {\r\n    shape.setAttribute('opacity', markup.opacity || 1);\r\n  };\r\n  shape.setAttributeNS(\r\n    'http://www.w3.org/1999/xlink',\r\n    'xlink:href',\r\n    markup.src\r\n  );\r\n  return shape;\r\n};\r\n\r\nconst createLine = markup => {\r\n  const shape = svg('g', {\r\n    id: markup.id,\r\n    'stroke-linecap': 'round',\r\n    'stroke-linejoin': 'round'\r\n  });\r\n\r\n  const line = svg('line');\r\n  shape.appendChild(line);\r\n\r\n  const begin = svg('path');\r\n  shape.appendChild(begin);\r\n\r\n  const end = svg('path');\r\n  shape.appendChild(end);\r\n\r\n  return shape;\r\n};\r\n\r\nconst CREATE_TYPE_ROUTES = {\r\n  image: createImage,\r\n  rect: createShape('rect'),\r\n  ellipse: createShape('ellipse'),\r\n  text: createShape('text'),\r\n  path: createShape('path'),\r\n  line: createLine\r\n};\r\n\r\nconst UPDATE_TYPE_ROUTES = {\r\n  rect: updateRect,\r\n  ellipse: updateEllipse,\r\n  image: updateImage,\r\n  text: updateText,\r\n  path: updatePath,\r\n  line: updateLine\r\n};\r\n\r\nconst createMarkupByType = (type, markup) => CREATE_TYPE_ROUTES[type](markup);\r\n\r\nconst updateMarkupByType = (element, type, markup, size, scale) => {\r\n  if (type !== 'path') {\r\n    element.rect = getMarkupRect(markup, size, scale);\r\n  }\r\n  element.styles = getMarkupStyles(markup, size, scale);\r\n  UPDATE_TYPE_ROUTES[type](element, markup, size, scale);\r\n};\r\n\r\nconst MARKUP_RECT = [\r\n  'x',\r\n  'y',\r\n  'left',\r\n  'top',\r\n  'right',\r\n  'bottom',\r\n  'width',\r\n  'height'\r\n];\r\n\r\nconst toOptionalFraction = value =>\r\n  typeof value === 'string' && /%/.test(value)\r\n    ? parseFloat(value) / 100\r\n    : value;\r\n\r\n// adds default markup properties, clones markup\r\nconst prepareMarkup = markup => {\r\n  const [type, props] = markup;\r\n\r\n  const rect = props.points\r\n    ? {}\r\n    : MARKUP_RECT.reduce((prev, curr) => {\r\n        prev[curr] = toOptionalFraction(props[curr]);\r\n        return prev;\r\n      }, {});\r\n\r\n  return [\r\n    type,\r\n    {\r\n      zIndex: 0,\r\n      ...props,\r\n      ...rect\r\n    }\r\n  ];\r\n};\r\n\r\nconst sortMarkupByZIndex = (a, b) => {\r\n  if (a[1].zIndex > b[1].zIndex) {\r\n    return 1;\r\n  }\r\n  if (a[1].zIndex < b[1].zIndex) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst createMarkupView = _ =>\r\n  _.utils.createView({\r\n    name: 'image-preview-markup',\r\n    tag: 'svg',\r\n    ignoreRect: true,\r\n    mixins: {\r\n      apis: ['width', 'height', 'crop', 'markup', 'resize', 'dirty']\r\n    },\r\n    write: ({ root, props }) => {\r\n      if (!props.dirty) return;\r\n\r\n      const { crop, resize, markup } = props;\r\n\r\n      const viewWidth = props.width;\r\n      const viewHeight = props.height;\r\n\r\n      let cropWidth = crop.width;\r\n      let cropHeight = crop.height;\r\n\r\n      if (resize) {\r\n        const { size } = resize;\r\n\r\n        let outputWidth = size && size.width;\r\n        let outputHeight = size && size.height;\r\n        const outputFit = resize.mode;\r\n        const outputUpscale = resize.upscale;\r\n\r\n        if (outputWidth && !outputHeight) outputHeight = outputWidth;\r\n        if (outputHeight && !outputWidth) outputWidth = outputHeight;\r\n\r\n        const shouldUpscale =\r\n          cropWidth < outputWidth && cropHeight < outputHeight;\r\n\r\n        if (!shouldUpscale || (shouldUpscale && outputUpscale)) {\r\n          let scalarWidth = outputWidth / cropWidth;\r\n          let scalarHeight = outputHeight / cropHeight;\r\n\r\n          if (outputFit === 'force') {\r\n            cropWidth = outputWidth;\r\n            cropHeight = outputHeight;\r\n          } else {\r\n            let scalar;\r\n            if (outputFit === 'cover') {\r\n              scalar = Math.max(scalarWidth, scalarHeight);\r\n            } else if (outputFit === 'contain') {\r\n              scalar = Math.min(scalarWidth, scalarHeight);\r\n            }\r\n            cropWidth = cropWidth * scalar;\r\n            cropHeight = cropHeight * scalar;\r\n          }\r\n        }\r\n      }\r\n\r\n      const size = {\r\n        width: viewWidth,\r\n        height: viewHeight\r\n      };\r\n\r\n      root.element.setAttribute('width', size.width);\r\n      root.element.setAttribute('height', size.height);\r\n\r\n      const scale = Math.min(viewWidth / cropWidth, viewHeight / cropHeight);\r\n\r\n      // clear\r\n      root.element.innerHTML = '';\r\n\r\n      // get filter\r\n      const markupFilter = root.query('GET_IMAGE_PREVIEW_MARKUP_FILTER');\r\n\r\n      // draw new\r\n      markup\r\n        .filter(markupFilter)\r\n        .map(prepareMarkup)\r\n        .sort(sortMarkupByZIndex)\r\n        .forEach(markup => {\r\n          const [type, settings] = markup;\r\n\r\n          // create\r\n          const element = createMarkupByType(type, settings);\r\n\r\n          // update\r\n          updateMarkupByType(element, type, settings, size, scale);\r\n\r\n          // add\r\n          root.element.appendChild(element);\r\n        });\r\n    }\r\n  });\r\n\r\nconst createVector$1 = (x, y) => ({ x, y });\r\n\r\nconst vectorDot = (a, b) => a.x * b.x + a.y * b.y;\r\n\r\nconst vectorSubtract = (a, b) => createVector$1(a.x - b.x, a.y - b.y);\r\n\r\nconst vectorDistanceSquared = (a, b) =>\r\n  vectorDot(vectorSubtract(a, b), vectorSubtract(a, b));\r\n\r\nconst vectorDistance = (a, b) => Math.sqrt(vectorDistanceSquared(a, b));\r\n\r\nconst getOffsetPointOnEdge = (length, rotation) => {\r\n  const a = length;\r\n\r\n  const A = 1.5707963267948966;\r\n  const B = rotation;\r\n  const C = 1.5707963267948966 - rotation;\r\n\r\n  const sinA = Math.sin(A);\r\n  const sinB = Math.sin(B);\r\n  const sinC = Math.sin(C);\r\n  const cosC = Math.cos(C);\r\n  const ratio = a / sinA;\r\n  const b = ratio * sinB;\r\n  const c = ratio * sinC;\r\n\r\n  return createVector$1(cosC * b, cosC * c);\r\n};\r\n\r\nconst getRotatedRectSize = (rect, rotation) => {\r\n  const w = rect.width;\r\n  const h = rect.height;\r\n\r\n  const hor = getOffsetPointOnEdge(w, rotation);\r\n  const ver = getOffsetPointOnEdge(h, rotation);\r\n\r\n  const tl = createVector$1(rect.x + Math.abs(hor.x), rect.y - Math.abs(hor.y));\r\n\r\n  const tr = createVector$1(\r\n    rect.x + rect.width + Math.abs(ver.y),\r\n    rect.y + Math.abs(ver.x)\r\n  );\r\n\r\n  const bl = createVector$1(\r\n    rect.x - Math.abs(ver.y),\r\n    rect.y + rect.height - Math.abs(ver.x)\r\n  );\r\n\r\n  return {\r\n    width: vectorDistance(tl, tr),\r\n    height: vectorDistance(tl, bl)\r\n  };\r\n};\r\n\r\nconst calculateCanvasSize = (image, canvasAspectRatio, zoom = 1) => {\r\n  const imageAspectRatio = image.height / image.width;\r\n\r\n  // determine actual pixels on x and y axis\r\n  let canvasWidth = 1;\r\n  let canvasHeight = canvasAspectRatio;\r\n  let imgWidth = 1;\r\n  let imgHeight = imageAspectRatio;\r\n  if (imgHeight > canvasHeight) {\r\n    imgHeight = canvasHeight;\r\n    imgWidth = imgHeight / imageAspectRatio;\r\n  }\r\n\r\n  const scalar = Math.max(canvasWidth / imgWidth, canvasHeight / imgHeight);\r\n  const width = image.width / (zoom * scalar * imgWidth);\r\n  const height = width * canvasAspectRatio;\r\n\r\n  return {\r\n    width: width,\r\n    height: height\r\n  };\r\n};\r\n\r\nconst getImageRectZoomFactor = (imageRect, cropRect, rotation, center) => {\r\n  // calculate available space round image center position\r\n  const cx = center.x > 0.5 ? 1 - center.x : center.x;\r\n  const cy = center.y > 0.5 ? 1 - center.y : center.y;\r\n  const imageWidth = cx * 2 * imageRect.width;\r\n  const imageHeight = cy * 2 * imageRect.height;\r\n\r\n  // calculate rotated crop rectangle size\r\n  const rotatedCropSize = getRotatedRectSize(cropRect, rotation);\r\n\r\n  // calculate scalar required to fit image\r\n  return Math.max(\r\n    rotatedCropSize.width / imageWidth,\r\n    rotatedCropSize.height / imageHeight\r\n  );\r\n};\r\n\r\nconst getCenteredCropRect = (container, aspectRatio) => {\r\n  let width = container.width;\r\n  let height = width * aspectRatio;\r\n  if (height > container.height) {\r\n    height = container.height;\r\n    width = height / aspectRatio;\r\n  }\r\n  const x = (container.width - width) * 0.5;\r\n  const y = (container.height - height) * 0.5;\r\n\r\n  return {\r\n    x,\r\n    y,\r\n    width,\r\n    height\r\n  };\r\n};\r\n\r\nconst getCurrentCropSize = (imageSize, crop = {}) => {\r\n  let { zoom, rotation, center, aspectRatio } = crop;\r\n\r\n  if (!aspectRatio) aspectRatio = imageSize.height / imageSize.width;\r\n\r\n  const canvasSize = calculateCanvasSize(imageSize, aspectRatio, zoom);\r\n\r\n  const canvasCenter = {\r\n    x: canvasSize.width * 0.5,\r\n    y: canvasSize.height * 0.5\r\n  };\r\n\r\n  const stage = {\r\n    x: 0,\r\n    y: 0,\r\n    width: canvasSize.width,\r\n    height: canvasSize.height,\r\n    center: canvasCenter\r\n  };\r\n\r\n  const shouldLimit = typeof crop.scaleToFit === 'undefined' || crop.scaleToFit;\r\n\r\n  const stageZoomFactor = getImageRectZoomFactor(\r\n    imageSize,\r\n    getCenteredCropRect(stage, aspectRatio),\r\n    rotation,\r\n    shouldLimit ? center : { x: 0.5, y: 0.5 }\r\n  );\r\n\r\n  const scale = zoom * stageZoomFactor;\r\n\r\n  // start drawing\r\n  return {\r\n    widthFloat: canvasSize.width / scale,\r\n    heightFloat: canvasSize.height / scale,\r\n    width: Math.round(canvasSize.width / scale),\r\n    height: Math.round(canvasSize.height / scale)\r\n  };\r\n};\r\n\r\nconst IMAGE_SCALE_SPRING_PROPS = {\r\n  type: 'spring',\r\n  stiffness: 0.5,\r\n  damping: 0.45,\r\n  mass: 10\r\n};\r\n\r\n// does horizontal and vertical flipping\r\nconst createBitmapView = _ =>\r\n  _.utils.createView({\r\n    name: 'image-bitmap',\r\n    ignoreRect: true,\r\n    mixins: { styles: ['scaleX', 'scaleY'] },\r\n    create: ({ root, props }) => {\r\n      root.appendChild(props.image);\r\n    }\r\n  });\r\n\r\n// shifts and rotates image\r\nconst createImageCanvasWrapper = _ =>\r\n  _.utils.createView({\r\n    name: 'image-canvas-wrapper',\r\n    tag: 'div',\r\n    ignoreRect: true,\r\n    mixins: {\r\n      apis: ['crop', 'width', 'height'],\r\n      styles: [\r\n        'originX',\r\n        'originY',\r\n        'translateX',\r\n        'translateY',\r\n        'scaleX',\r\n        'scaleY',\r\n        'rotateZ'\r\n      ],\r\n      animations: {\r\n        originX: IMAGE_SCALE_SPRING_PROPS,\r\n        originY: IMAGE_SCALE_SPRING_PROPS,\r\n        scaleX: IMAGE_SCALE_SPRING_PROPS,\r\n        scaleY: IMAGE_SCALE_SPRING_PROPS,\r\n        translateX: IMAGE_SCALE_SPRING_PROPS,\r\n        translateY: IMAGE_SCALE_SPRING_PROPS,\r\n        rotateZ: IMAGE_SCALE_SPRING_PROPS\r\n      }\r\n    },\r\n    create: ({ root, props }) => {\r\n      props.width = props.image.width;\r\n      props.height = props.image.height;\r\n      root.ref.bitmap = root.appendChildView(\r\n        root.createChildView(createBitmapView(_), { image: props.image })\r\n      );\r\n    },\r\n    write: ({ root, props }) => {\r\n      const { flip } = props.crop;\r\n      const { bitmap } = root.ref;\r\n      bitmap.scaleX = flip.horizontal ? -1 : 1;\r\n      bitmap.scaleY = flip.vertical ? -1 : 1;\r\n    }\r\n  });\r\n\r\n// clips canvas to correct aspect ratio\r\nconst createClipView = _ =>\r\n  _.utils.createView({\r\n    name: 'image-clip',\r\n    tag: 'div',\r\n    ignoreRect: true,\r\n    mixins: {\r\n      apis: [\r\n        'crop',\r\n        'markup',\r\n        'resize',\r\n        'width',\r\n        'height',\r\n        'dirty',\r\n        'background'\r\n      ],\r\n      styles: ['width', 'height', 'opacity'],\r\n      animations: {\r\n        opacity: { type: 'tween', duration: 250 }\r\n      }\r\n    },\r\n    didWriteView: function({ root, props }) {\r\n      if (!props.background) return;\r\n      root.element.style.backgroundColor = props.background;\r\n    },\r\n    create: ({ root, props }) => {\r\n      root.ref.image = root.appendChildView(\r\n        root.createChildView(\r\n          createImageCanvasWrapper(_),\r\n          Object.assign({}, props)\r\n        )\r\n      );\r\n\r\n      root.ref.createMarkup = () => {\r\n        if (root.ref.markup) return;\r\n        root.ref.markup = root.appendChildView(\r\n          root.createChildView(createMarkupView(_), Object.assign({}, props))\r\n        );\r\n      };\r\n\r\n      root.ref.destroyMarkup = () => {\r\n        if (!root.ref.markup) return;\r\n        root.removeChildView(root.ref.markup);\r\n        root.ref.markup = null;\r\n      };\r\n\r\n      // set up transparency grid\r\n      const transparencyIndicator = root.query(\r\n        'GET_IMAGE_PREVIEW_TRANSPARENCY_INDICATOR'\r\n      );\r\n      if (transparencyIndicator === null) return;\r\n\r\n      // grid pattern\r\n      if (transparencyIndicator === 'grid') {\r\n        root.element.dataset.transparencyIndicator = transparencyIndicator;\r\n      }\r\n      // basic color\r\n      else {\r\n        root.element.dataset.transparencyIndicator = 'color';\r\n      }\r\n    },\r\n    write: ({ root, props, shouldOptimize }) => {\r\n      const { crop, markup, resize, dirty, width, height } = props;\r\n\r\n      root.ref.image.crop = crop;\r\n\r\n      const stage = {\r\n        x: 0,\r\n        y: 0,\r\n        width,\r\n        height,\r\n        center: {\r\n          x: width * 0.5,\r\n          y: height * 0.5\r\n        }\r\n      };\r\n\r\n      const image = {\r\n        width: root.ref.image.width,\r\n        height: root.ref.image.height\r\n      };\r\n\r\n      const origin = {\r\n        x: crop.center.x * image.width,\r\n        y: crop.center.y * image.height\r\n      };\r\n\r\n      const translation = {\r\n        x: stage.center.x - image.width * crop.center.x,\r\n        y: stage.center.y - image.height * crop.center.y\r\n      };\r\n\r\n      const rotation = Math.PI * 2 + (crop.rotation % (Math.PI * 2));\r\n\r\n      const cropAspectRatio = crop.aspectRatio || image.height / image.width;\r\n\r\n      const shouldLimit =\r\n        typeof crop.scaleToFit === 'undefined' || crop.scaleToFit;\r\n\r\n      const stageZoomFactor = getImageRectZoomFactor(\r\n        image,\r\n        getCenteredCropRect(stage, cropAspectRatio),\r\n        rotation,\r\n        shouldLimit ? crop.center : { x: 0.5, y: 0.5 }\r\n      );\r\n\r\n      const scale = crop.zoom * stageZoomFactor;\r\n\r\n      // update markup view\r\n      if (markup && markup.length) {\r\n        root.ref.createMarkup();\r\n        root.ref.markup.width = width;\r\n        root.ref.markup.height = height;\r\n        root.ref.markup.resize = resize;\r\n        root.ref.markup.dirty = dirty;\r\n        root.ref.markup.markup = markup;\r\n        root.ref.markup.crop = getCurrentCropSize(image, crop);\r\n      } else if (root.ref.markup) {\r\n        root.ref.destroyMarkup();\r\n      }\r\n\r\n      // update image view\r\n      const imageView = root.ref.image;\r\n\r\n      // don't update clip layout\r\n      if (shouldOptimize) {\r\n        imageView.originX = null;\r\n        imageView.originY = null;\r\n        imageView.translateX = null;\r\n        imageView.translateY = null;\r\n        imageView.rotateZ = null;\r\n        imageView.scaleX = null;\r\n        imageView.scaleY = null;\r\n        return;\r\n      }\r\n\r\n      imageView.originX = origin.x;\r\n      imageView.originY = origin.y;\r\n      imageView.translateX = translation.x;\r\n      imageView.translateY = translation.y;\r\n      imageView.rotateZ = rotation;\r\n      imageView.scaleX = scale;\r\n      imageView.scaleY = scale;\r\n    }\r\n  });\r\n\r\nconst createImageView = _ =>\r\n  _.utils.createView({\r\n    name: 'image-preview',\r\n    tag: 'div',\r\n    ignoreRect: true,\r\n    mixins: {\r\n      apis: ['image', 'crop', 'markup', 'resize', 'dirty', 'background'],\r\n      styles: ['translateY', 'scaleX', 'scaleY', 'opacity'],\r\n      animations: {\r\n        scaleX: IMAGE_SCALE_SPRING_PROPS,\r\n        scaleY: IMAGE_SCALE_SPRING_PROPS,\r\n        translateY: IMAGE_SCALE_SPRING_PROPS,\r\n        opacity: { type: 'tween', duration: 400 }\r\n      }\r\n    },\r\n    create: ({ root, props }) => {\r\n      root.ref.clip = root.appendChildView(\r\n        root.createChildView(createClipView(_), {\r\n          id: props.id,\r\n          image: props.image,\r\n          crop: props.crop,\r\n          markup: props.markup,\r\n          resize: props.resize,\r\n          dirty: props.dirty,\r\n          background: props.background\r\n        })\r\n      );\r\n    },\r\n    write: ({ root, props, shouldOptimize }) => {\r\n      const { clip } = root.ref;\r\n\r\n      const { image, crop, markup, resize, dirty } = props;\r\n\r\n      clip.crop = crop;\r\n      clip.markup = markup;\r\n      clip.resize = resize;\r\n      clip.dirty = dirty;\r\n\r\n      // don't update clip layout\r\n      clip.opacity = shouldOptimize ? 0 : 1;\r\n\r\n      // don't re-render if optimizing or hidden (width will be zero resulting in weird animations)\r\n      if (shouldOptimize || root.rect.element.hidden) return;\r\n\r\n      // calculate scaled preview image size\r\n      const imageAspectRatio = image.height / image.width;\r\n      let aspectRatio = crop.aspectRatio || imageAspectRatio;\r\n\r\n      // calculate container size\r\n      const containerWidth = root.rect.inner.width;\r\n      const containerHeight = root.rect.inner.height;\r\n\r\n      let fixedPreviewHeight = root.query('GET_IMAGE_PREVIEW_HEIGHT');\r\n      const minPreviewHeight = root.query('GET_IMAGE_PREVIEW_MIN_HEIGHT');\r\n      const maxPreviewHeight = root.query('GET_IMAGE_PREVIEW_MAX_HEIGHT');\r\n\r\n      const panelAspectRatio = root.query('GET_PANEL_ASPECT_RATIO');\r\n      const allowMultiple = root.query('GET_ALLOW_MULTIPLE');\r\n\r\n      if (panelAspectRatio && !allowMultiple) {\r\n        fixedPreviewHeight = containerWidth * panelAspectRatio;\r\n        aspectRatio = panelAspectRatio;\r\n      }\r\n\r\n      // determine clip width and height\r\n      let clipHeight =\r\n        fixedPreviewHeight !== null\r\n          ? fixedPreviewHeight\r\n          : Math.max(\r\n              minPreviewHeight,\r\n              Math.min(containerWidth * aspectRatio, maxPreviewHeight)\r\n            );\r\n\r\n      let clipWidth = clipHeight / aspectRatio;\r\n      if (clipWidth > containerWidth) {\r\n        clipWidth = containerWidth;\r\n        clipHeight = clipWidth * aspectRatio;\r\n      }\r\n\r\n      if (clipHeight > containerHeight) {\r\n        clipHeight = containerHeight;\r\n        clipWidth = containerHeight / aspectRatio;\r\n      }\r\n\r\n      clip.width = clipWidth;\r\n      clip.height = clipHeight;\r\n    }\r\n  });\r\n\r\nlet SVG_MASK = `<svg width=\"500\" height=\"200\" viewBox=\"0 0 500 200\" preserveAspectRatio=\"none\">\r\n    <defs>\r\n        <radialGradient id=\"gradient-__UID__\" cx=\".5\" cy=\"1.25\" r=\"1.15\">\r\n            <stop offset='50%' stop-color='#000000'/>\r\n            <stop offset='56%' stop-color='#0a0a0a'/>\r\n            <stop offset='63%' stop-color='#262626'/>\r\n            <stop offset='69%' stop-color='#4f4f4f'/>\r\n            <stop offset='75%' stop-color='#808080'/>\r\n            <stop offset='81%' stop-color='#b1b1b1'/>\r\n            <stop offset='88%' stop-color='#dadada'/>\r\n            <stop offset='94%' stop-color='#f6f6f6'/>\r\n            <stop offset='100%' stop-color='#ffffff'/>\r\n        </radialGradient>\r\n        <mask id=\"mask-__UID__\">\r\n            <rect x=\"0\" y=\"0\" width=\"500\" height=\"200\" fill=\"url(#gradient-__UID__)\"></rect>\r\n        </mask>\r\n    </defs>\r\n    <rect x=\"0\" width=\"500\" height=\"200\" fill=\"currentColor\" mask=\"url(#mask-__UID__)\"></rect>\r\n</svg>`;\r\n\r\nlet SVGMaskUniqueId = 0;\r\n\r\nconst createImageOverlayView = fpAPI =>\r\n  fpAPI.utils.createView({\r\n    name: 'image-preview-overlay',\r\n    tag: 'div',\r\n    ignoreRect: true,\r\n    create: ({ root, props }) => {\r\n      let mask = SVG_MASK;\r\n      if (document.querySelector('base')) {\r\n        const url = new URL(\r\n          window.location.href.replace(window.location.hash, '')\r\n        ).href;\r\n        mask = mask.replace(/url\\(\\#/g, 'url(' + url + '#');\r\n      }\r\n\r\n      SVGMaskUniqueId++;\r\n      root.element.classList.add(\r\n        `filepond--image-preview-overlay-${props.status}`\r\n      );\r\n      root.element.innerHTML = mask.replace(/__UID__/g, SVGMaskUniqueId);\r\n    },\r\n    mixins: {\r\n      styles: ['opacity'],\r\n      animations: {\r\n        opacity: { type: 'spring', mass: 25 }\r\n      }\r\n    }\r\n  });\r\n\r\n/**\r\n * Bitmap Worker\r\n */\r\nconst BitmapWorker = function() {\r\n  self.onmessage = e => {\r\n    createImageBitmap(e.data.message.file).then(bitmap => {\r\n      self.postMessage({ id: e.data.id, message: bitmap }, [bitmap]);\r\n    });\r\n  };\r\n};\r\n\r\n/**\r\n * ColorMatrix Worker\r\n */\r\nconst ColorMatrixWorker = function() {\r\n  self.onmessage = e => {\r\n    const imageData = e.data.message.imageData;\r\n    const matrix = e.data.message.colorMatrix;\r\n\r\n    const data = imageData.data;\r\n    const l = data.length;\r\n\r\n    const m11 = matrix[0];\r\n    const m12 = matrix[1];\r\n    const m13 = matrix[2];\r\n    const m14 = matrix[3];\r\n    const m15 = matrix[4];\r\n\r\n    const m21 = matrix[5];\r\n    const m22 = matrix[6];\r\n    const m23 = matrix[7];\r\n    const m24 = matrix[8];\r\n    const m25 = matrix[9];\r\n\r\n    const m31 = matrix[10];\r\n    const m32 = matrix[11];\r\n    const m33 = matrix[12];\r\n    const m34 = matrix[13];\r\n    const m35 = matrix[14];\r\n\r\n    const m41 = matrix[15];\r\n    const m42 = matrix[16];\r\n    const m43 = matrix[17];\r\n    const m44 = matrix[18];\r\n    const m45 = matrix[19];\r\n\r\n    let index = 0,\r\n      r = 0.0,\r\n      g = 0.0,\r\n      b = 0.0,\r\n      a = 0.0;\r\n\r\n    for (; index < l; index += 4) {\r\n      r = data[index] / 255;\r\n      g = data[index + 1] / 255;\r\n      b = data[index + 2] / 255;\r\n      a = data[index + 3] / 255;\r\n      data[index] = Math.max(\r\n        0,\r\n        Math.min((r * m11 + g * m12 + b * m13 + a * m14 + m15) * 255, 255)\r\n      );\r\n      data[index + 1] = Math.max(\r\n        0,\r\n        Math.min((r * m21 + g * m22 + b * m23 + a * m24 + m25) * 255, 255)\r\n      );\r\n      data[index + 2] = Math.max(\r\n        0,\r\n        Math.min((r * m31 + g * m32 + b * m33 + a * m34 + m35) * 255, 255)\r\n      );\r\n      data[index + 3] = Math.max(\r\n        0,\r\n        Math.min((r * m41 + g * m42 + b * m43 + a * m44 + m45) * 255, 255)\r\n      );\r\n    }\r\n\r\n    self.postMessage({ id: e.data.id, message: imageData }, [\r\n      imageData.data.buffer\r\n    ]);\r\n  };\r\n};\r\n\r\nconst getImageSize = (url, cb) => {\r\n  let image = new Image();\r\n  image.onload = () => {\r\n    const width = image.naturalWidth;\r\n    const height = image.naturalHeight;\r\n    image = null;\r\n    cb(width, height);\r\n  };\r\n  image.src = url;\r\n};\r\n\r\nconst transforms = {\r\n  1: () => [1, 0, 0, 1, 0, 0],\r\n  2: width => [-1, 0, 0, 1, width, 0],\r\n  3: (width, height) => [-1, 0, 0, -1, width, height],\r\n  4: (width, height) => [1, 0, 0, -1, 0, height],\r\n  5: () => [0, 1, 1, 0, 0, 0],\r\n  6: (width, height) => [0, 1, -1, 0, height, 0],\r\n  7: (width, height) => [0, -1, -1, 0, height, width],\r\n  8: width => [0, -1, 1, 0, 0, width]\r\n};\r\n\r\nconst fixImageOrientation = (ctx, width, height, orientation) => {\r\n  // no orientation supplied\r\n  if (orientation === -1) {\r\n    return;\r\n  }\r\n\r\n  ctx.transform.apply(ctx, transforms[orientation](width, height));\r\n};\r\n\r\n// draws the preview image to canvas\r\nconst createPreviewImage = (data, width, height, orientation) => {\r\n  // can't draw on half pixels\r\n  width = Math.round(width);\r\n  height = Math.round(height);\r\n\r\n  // draw image\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  // if is rotated incorrectly swap width and height\r\n  if (orientation >= 5 && orientation <= 8) {\r\n    [width, height] = [height, width];\r\n  }\r\n\r\n  // correct image orientation\r\n  fixImageOrientation(ctx, width, height, orientation);\r\n\r\n  // draw the image\r\n  ctx.drawImage(data, 0, 0, width, height);\r\n\r\n  return canvas;\r\n};\r\n\r\nconst isBitmap = file => /^image/.test(file.type) && !/svg/.test(file.type);\r\n\r\nconst MAX_WIDTH = 10;\r\nconst MAX_HEIGHT = 10;\r\n\r\nconst calculateAverageColor = image => {\r\n  const scalar = Math.min(MAX_WIDTH / image.width, MAX_HEIGHT / image.height);\r\n\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n  const width = (canvas.width = Math.ceil(image.width * scalar));\r\n  const height = (canvas.height = Math.ceil(image.height * scalar));\r\n  ctx.drawImage(image, 0, 0, width, height);\r\n  let data = null;\r\n  try {\r\n    data = ctx.getImageData(0, 0, width, height).data;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n  const l = data.length;\r\n\r\n  let r = 0;\r\n  let g = 0;\r\n  let b = 0;\r\n  let i = 0;\r\n\r\n  for (; i < l; i += 4) {\r\n    r += data[i] * data[i];\r\n    g += data[i + 1] * data[i + 1];\r\n    b += data[i + 2] * data[i + 2];\r\n  }\r\n\r\n  r = averageColor(r, l);\r\n  g = averageColor(g, l);\r\n  b = averageColor(b, l);\r\n\r\n  return { r, g, b };\r\n};\r\n\r\nconst averageColor = (c, l) => Math.floor(Math.sqrt(c / (l / 4)));\r\n\r\nconst cloneCanvas = (origin, target) => {\r\n  target = target || document.createElement('canvas');\r\n  target.width = origin.width;\r\n  target.height = origin.height;\r\n  const ctx = target.getContext('2d');\r\n  ctx.drawImage(origin, 0, 0);\r\n  return target;\r\n};\r\n\r\nconst cloneImageData = imageData => {\r\n  let id;\r\n  try {\r\n    id = new ImageData(imageData.width, imageData.height);\r\n  } catch (e) {\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    id = ctx.createImageData(imageData.width, imageData.height);\r\n  }\r\n  id.data.set(new Uint8ClampedArray(imageData.data));\r\n  return id;\r\n};\r\n\r\nconst loadImage = url =>\r\n  new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    img.crossOrigin = 'Anonymous';\r\n    img.onload = () => {\r\n      resolve(img);\r\n    };\r\n    img.onerror = e => {\r\n      reject(e);\r\n    };\r\n    img.src = url;\r\n  });\r\n\r\nconst createImageWrapperView = _ => {\r\n  // create overlay view\r\n  const OverlayView = createImageOverlayView(_);\r\n\r\n  const ImageView = createImageView(_);\r\n\r\n  const { createWorker } = _.utils;\r\n\r\n  const applyFilter = (root, filter, target) =>\r\n    new Promise(resolve => {\r\n      // will store image data for future filter updates\r\n      if (!root.ref.imageData) {\r\n        root.ref.imageData = target\r\n          .getContext('2d')\r\n          .getImageData(0, 0, target.width, target.height);\r\n      }\r\n\r\n      // get image data reference\r\n      const imageData = cloneImageData(root.ref.imageData);\r\n\r\n      if (!filter || filter.length !== 20) {\r\n        target.getContext('2d').putImageData(imageData, 0, 0);\r\n        return resolve();\r\n      }\r\n\r\n      const worker = createWorker(ColorMatrixWorker);\r\n      worker.post(\r\n        {\r\n          imageData,\r\n          colorMatrix: filter\r\n        },\r\n        response => {\r\n          // apply filtered colors\r\n          target.getContext('2d').putImageData(response, 0, 0);\r\n\r\n          // stop worker\r\n          worker.terminate();\r\n\r\n          // done!\r\n          resolve();\r\n        },\r\n        [imageData.data.buffer]\r\n      );\r\n    });\r\n\r\n  const removeImageView = (root, imageView) => {\r\n    root.removeChildView(imageView);\r\n    imageView.image.width = 1;\r\n    imageView.image.height = 1;\r\n    imageView._destroy();\r\n  };\r\n\r\n  // remove an image\r\n  const shiftImage = ({ root }) => {\r\n    const imageView = root.ref.images.shift();\r\n    imageView.opacity = 0;\r\n    imageView.translateY = -15;\r\n    root.ref.imageViewBin.push(imageView);\r\n    return imageView;\r\n  };\r\n\r\n  // add new image\r\n  const pushImage = ({ root, props, image }) => {\r\n    const id = props.id;\r\n    const item = root.query('GET_ITEM', { id });\r\n    if (!item) return;\r\n\r\n    const crop = item.getMetadata('crop') || {\r\n      center: {\r\n        x: 0.5,\r\n        y: 0.5\r\n      },\r\n      flip: {\r\n        horizontal: false,\r\n        vertical: false\r\n      },\r\n      zoom: 1,\r\n      rotation: 0,\r\n      aspectRatio: null\r\n    };\r\n\r\n    const background = root.query(\r\n      'GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR'\r\n    );\r\n\r\n    let markup;\r\n    let resize;\r\n    let dirty = false;\r\n    if (root.query('GET_IMAGE_PREVIEW_MARKUP_SHOW')) {\r\n      markup = item.getMetadata('markup') || [];\r\n      resize = item.getMetadata('resize');\r\n      dirty = true;\r\n    }\r\n\r\n    // append image presenter\r\n    const imageView = root.appendChildView(\r\n      root.createChildView(ImageView, {\r\n        id,\r\n        image,\r\n        crop,\r\n        resize,\r\n        markup,\r\n        dirty,\r\n        background,\r\n        opacity: 0,\r\n        scaleX: 1.15,\r\n        scaleY: 1.15,\r\n        translateY: 15\r\n      }),\r\n      root.childViews.length\r\n    );\r\n    root.ref.images.push(imageView);\r\n\r\n    // reveal the preview image\r\n    imageView.opacity = 1;\r\n    imageView.scaleX = 1;\r\n    imageView.scaleY = 1;\r\n    imageView.translateY = 0;\r\n\r\n    // the preview is now ready to be drawn\r\n    setTimeout(() => {\r\n      root.dispatch('DID_IMAGE_PREVIEW_SHOW', { id });\r\n    }, 250);\r\n  };\r\n\r\n  const updateImage = ({ root, props }) => {\r\n    const item = root.query('GET_ITEM', { id: props.id });\r\n    if (!item) return;\r\n    const imageView = root.ref.images[root.ref.images.length - 1];\r\n    imageView.crop = item.getMetadata('crop');\r\n    imageView.background = root.query(\r\n      'GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR'\r\n    );\r\n    if (root.query('GET_IMAGE_PREVIEW_MARKUP_SHOW')) {\r\n      imageView.dirty = true;\r\n      imageView.resize = item.getMetadata('resize');\r\n      imageView.markup = item.getMetadata('markup');\r\n    }\r\n  };\r\n\r\n  // replace image preview\r\n  const didUpdateItemMetadata = ({ root, props, action }) => {\r\n    // only filter and crop trigger redraw\r\n    if (!/crop|filter|markup|resize/.test(action.change.key)) return;\r\n\r\n    // no images to update, exit\r\n    if (!root.ref.images.length) return;\r\n\r\n    // no item found, exit\r\n    const item = root.query('GET_ITEM', { id: props.id });\r\n    if (!item) return;\r\n\r\n    // for now, update existing image when filtering\r\n    if (/filter/.test(action.change.key)) {\r\n      const imageView = root.ref.images[root.ref.images.length - 1];\r\n      applyFilter(root, action.change.value, imageView.image);\r\n      return;\r\n    }\r\n\r\n    if (/crop|markup|resize/.test(action.change.key)) {\r\n      const crop = item.getMetadata('crop');\r\n      const image = root.ref.images[root.ref.images.length - 1];\r\n\r\n      // if aspect ratio has changed, we need to create a new image\r\n      if (\r\n        crop &&\r\n        crop.aspectRatio &&\r\n        image.crop &&\r\n        image.crop.aspectRatio &&\r\n        Math.abs(crop.aspectRatio - image.crop.aspectRatio) > 0.00001\r\n      ) {\r\n        const imageView = shiftImage({ root });\r\n        pushImage({ root, props, image: cloneCanvas(imageView.image) });\r\n      }\r\n      // if not, we can update the current image\r\n      else {\r\n        updateImage({ root, props });\r\n      }\r\n    }\r\n  };\r\n\r\n  const canCreateImageBitmap = file => {\r\n    // Firefox versions before 58 will freeze when running createImageBitmap\r\n    // in a Web Worker so we detect those versions and return false for support\r\n    const userAgent = window.navigator.userAgent;\r\n    const isFirefox = userAgent.match(/Firefox\\/([0-9]+)\\./);\r\n    const firefoxVersion = isFirefox ? parseInt(isFirefox[1]) : null;\r\n    if (firefoxVersion !== null && firefoxVersion <= 58) return false;\r\n\r\n    return 'createImageBitmap' in window && isBitmap(file);\r\n  };\r\n\r\n  /**\r\n   * Write handler for when preview container has been created\r\n   */\r\n  const didCreatePreviewContainer = ({ root, props }) => {\r\n    const { id } = props;\r\n\r\n    // we need to get the file data to determine the eventual image size\r\n    const item = root.query('GET_ITEM', id);\r\n    if (!item) return;\r\n\r\n    // get url to file (we'll revoke it later on when done)\r\n    const fileURL = URL.createObjectURL(item.file);\r\n\r\n    // determine image size of this item\r\n    getImageSize(fileURL, (width, height) => {\r\n      // we can now scale the panel to the final size\r\n      root.dispatch('DID_IMAGE_PREVIEW_CALCULATE_SIZE', {\r\n        id,\r\n        width,\r\n        height\r\n      });\r\n    });\r\n  };\r\n\r\n  const drawPreview = ({ root, props }) => {\r\n    const { id } = props;\r\n\r\n    // we need to get the file data to determine the eventual image size\r\n    const item = root.query('GET_ITEM', id);\r\n    if (!item) return;\r\n\r\n    // get url to file (we'll revoke it later on when done)\r\n    const fileURL = URL.createObjectURL(item.file);\r\n\r\n    // fallback\r\n    const loadPreviewFallback = () => {\r\n      // let's scale the image in the main thread :(\r\n      loadImage(fileURL).then(previewImageLoaded);\r\n    };\r\n\r\n    // image is now ready\r\n    const previewImageLoaded = imageData => {\r\n      // the file url is no longer needed\r\n      URL.revokeObjectURL(fileURL);\r\n\r\n      // draw the scaled down version here and use that as source so bitmapdata can be closed\r\n      // orientation info\r\n      const exif = item.getMetadata('exif') || {};\r\n      const orientation = exif.orientation || -1;\r\n\r\n      // get width and height from action, and swap if orientation is incorrect\r\n      let { width, height } = imageData;\r\n\r\n      // if no width or height, just return early.\r\n      if (!width || !height) return;\r\n\r\n      if (orientation >= 5 && orientation <= 8) {\r\n        [width, height] = [height, width];\r\n      }\r\n\r\n      // scale canvas based on pixel density\r\n      // we multiply by .75 as that creates smaller but still clear images on screens with high res displays\r\n      const pixelDensityFactor = Math.max(1, window.devicePixelRatio * 0.75);\r\n\r\n      // we want as much pixels to work with as possible,\r\n      // this multiplies the minimum image resolution,\r\n      // so when zooming in it doesn't get too blurry\r\n      const zoomFactor = root.query('GET_IMAGE_PREVIEW_ZOOM_FACTOR');\r\n\r\n      // imaeg scale factor\r\n      const scaleFactor = zoomFactor * pixelDensityFactor;\r\n\r\n      // calculate scaled preview image size\r\n      const previewImageRatio = height / width;\r\n\r\n      // calculate image preview height and width\r\n      const previewContainerWidth = root.rect.element.width;\r\n      const previewContainerHeight = root.rect.element.height;\r\n\r\n      let imageWidth = previewContainerWidth;\r\n      let imageHeight = imageWidth * previewImageRatio;\r\n\r\n      if (previewImageRatio > 1) {\r\n        imageWidth = Math.min(width, previewContainerWidth * scaleFactor);\r\n        imageHeight = imageWidth * previewImageRatio;\r\n      } else {\r\n        imageHeight = Math.min(height, previewContainerHeight * scaleFactor);\r\n        imageWidth = imageHeight / previewImageRatio;\r\n      }\r\n\r\n      // transfer to image tag so no canvas memory wasted on iOS\r\n      const previewImage = createPreviewImage(\r\n        imageData,\r\n        imageWidth,\r\n        imageHeight,\r\n        orientation\r\n      );\r\n\r\n      // done\r\n      const done = () => {\r\n        // calculate average image color, disabled for now\r\n        const averageColor = root.query(\r\n          'GET_IMAGE_PREVIEW_CALCULATE_AVERAGE_IMAGE_COLOR'\r\n        )\r\n          ? calculateAverageColor(data)\r\n          : null;\r\n        item.setMetadata('color', averageColor, true);\r\n\r\n        // data has been transferred to canvas ( if was ImageBitmap )\r\n        if ('close' in imageData) {\r\n          imageData.close();\r\n        }\r\n\r\n        // show the overlay\r\n        root.ref.overlayShadow.opacity = 1;\r\n\r\n        // create the first image\r\n        pushImage({ root, props, image: previewImage });\r\n      };\r\n\r\n      // apply filter\r\n      const filter = item.getMetadata('filter');\r\n      if (filter) {\r\n        applyFilter(root, filter, previewImage).then(done);\r\n      } else {\r\n        done();\r\n      }\r\n    };\r\n\r\n    // if we support scaling using createImageBitmap we use a worker\r\n    if (canCreateImageBitmap(item.file)) {\r\n      // let's scale the image in a worker\r\n      const worker = createWorker(BitmapWorker);\r\n\r\n      worker.post(\r\n        {\r\n          file: item.file\r\n        },\r\n        imageBitmap => {\r\n          // destroy worker\r\n          worker.terminate();\r\n\r\n          // no bitmap returned, must be something wrong,\r\n          // try the oldschool way\r\n          if (!imageBitmap) {\r\n            loadPreviewFallback();\r\n            return;\r\n          }\r\n\r\n          // yay we got our bitmap, let's continue showing the preview\r\n          previewImageLoaded(imageBitmap);\r\n        }\r\n      );\r\n    } else {\r\n      // create fallback preview\r\n      loadPreviewFallback();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Write handler for when the preview image is ready to be animated\r\n   */\r\n  const didDrawPreview = ({ root }) => {\r\n    // get last added image\r\n    const image = root.ref.images[root.ref.images.length - 1];\r\n    image.translateY = 0;\r\n    image.scaleX = 1.0;\r\n    image.scaleY = 1.0;\r\n    image.opacity = 1;\r\n  };\r\n\r\n  /**\r\n   * Write handler for when the preview has been loaded\r\n   */\r\n  const restoreOverlay = ({ root }) => {\r\n    root.ref.overlayShadow.opacity = 1;\r\n    root.ref.overlayError.opacity = 0;\r\n    root.ref.overlaySuccess.opacity = 0;\r\n  };\r\n\r\n  const didThrowError = ({ root }) => {\r\n    root.ref.overlayShadow.opacity = 0.25;\r\n    root.ref.overlayError.opacity = 1;\r\n  };\r\n\r\n  const didCompleteProcessing = ({ root }) => {\r\n    root.ref.overlayShadow.opacity = 0.25;\r\n    root.ref.overlaySuccess.opacity = 1;\r\n  };\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  const create = ({ root }) => {\r\n    // image view\r\n    root.ref.images = [];\r\n\r\n    // the preview image data (we need this to filter the image)\r\n    root.ref.imageData = null;\r\n\r\n    // image bin\r\n    root.ref.imageViewBin = [];\r\n\r\n    // image overlays\r\n    root.ref.overlayShadow = root.appendChildView(\r\n      root.createChildView(OverlayView, {\r\n        opacity: 0,\r\n        status: 'idle'\r\n      })\r\n    );\r\n\r\n    root.ref.overlaySuccess = root.appendChildView(\r\n      root.createChildView(OverlayView, {\r\n        opacity: 0,\r\n        status: 'success'\r\n      })\r\n    );\r\n\r\n    root.ref.overlayError = root.appendChildView(\r\n      root.createChildView(OverlayView, {\r\n        opacity: 0,\r\n        status: 'failure'\r\n      })\r\n    );\r\n  };\r\n\r\n  return _.utils.createView({\r\n    name: 'image-preview-wrapper',\r\n    create,\r\n    styles: ['height'],\r\n    apis: ['height'],\r\n    destroy: ({ root }) => {\r\n      // we resize the image so memory on iOS 12 is released more quickly (it seems)\r\n      root.ref.images.forEach(imageView => {\r\n        imageView.image.width = 1;\r\n        imageView.image.height = 1;\r\n      });\r\n    },\r\n    didWriteView: ({ root }) => {\r\n      root.ref.images.forEach(imageView => {\r\n        imageView.dirty = false;\r\n      });\r\n    },\r\n    write: _.utils.createRoute(\r\n      {\r\n        // image preview stated\r\n        DID_IMAGE_PREVIEW_DRAW: didDrawPreview,\r\n        DID_IMAGE_PREVIEW_CONTAINER_CREATE: didCreatePreviewContainer,\r\n        DID_FINISH_CALCULATE_PREVIEWSIZE: drawPreview,\r\n        DID_UPDATE_ITEM_METADATA: didUpdateItemMetadata,\r\n\r\n        // file states\r\n        DID_THROW_ITEM_LOAD_ERROR: didThrowError,\r\n        DID_THROW_ITEM_PROCESSING_ERROR: didThrowError,\r\n        DID_THROW_ITEM_INVALID: didThrowError,\r\n        DID_COMPLETE_ITEM_PROCESSING: didCompleteProcessing,\r\n        DID_START_ITEM_PROCESSING: restoreOverlay,\r\n        DID_REVERT_ITEM_PROCESSING: restoreOverlay\r\n      },\r\n      ({ root }) => {\r\n        // views on death row\r\n        const viewsToRemove = root.ref.imageViewBin.filter(\r\n          imageView => imageView.opacity === 0\r\n        );\r\n\r\n        // views to retain\r\n        root.ref.imageViewBin = root.ref.imageViewBin.filter(\r\n          imageView => imageView.opacity > 0\r\n        );\r\n\r\n        // remove these views\r\n        viewsToRemove.forEach(imageView => removeImageView(root, imageView));\r\n        viewsToRemove.length = 0;\r\n      }\r\n    )\r\n  });\r\n};\r\n\r\n/**\r\n * Image Preview Plugin\r\n */\r\nconst plugin = fpAPI => {\r\n  const { addFilter, utils } = fpAPI;\r\n  const { Type, createRoute, isFile } = utils;\r\n\r\n  // imagePreviewView\r\n  const imagePreviewView = createImageWrapperView(fpAPI);\r\n\r\n  // called for each view that is created right after the 'create' method\r\n  addFilter('CREATE_VIEW', viewAPI => {\r\n    // get reference to created view\r\n    const { is, view, query } = viewAPI;\r\n\r\n    // only hook up to item view and only if is enabled for this cropper\r\n    if (!is('file') || !query('GET_ALLOW_IMAGE_PREVIEW')) return;\r\n\r\n    // create the image preview plugin, but only do so if the item is an image\r\n    const didLoadItem = ({ root, props }) => {\r\n      const { id } = props;\r\n      const item = query('GET_ITEM', id);\r\n\r\n      // item could theoretically have been removed in the mean time\r\n      if (!item || !isFile(item.file) || item.archived) return;\r\n\r\n      // get the file object\r\n      const file = item.file;\r\n\r\n      // exit if this is not an image\r\n      if (!isPreviewableImage(file)) return;\r\n\r\n      // test if is filtered\r\n      if (!query('GET_IMAGE_PREVIEW_FILTER_ITEM')(item)) return;\r\n\r\n      // exit if image size is too high and no createImageBitmap support\r\n      // this would simply bring the browser to its knees and that is not what we want\r\n      const supportsCreateImageBitmap = 'createImageBitmap' in (window || {});\r\n      const maxPreviewFileSize = query('GET_IMAGE_PREVIEW_MAX_FILE_SIZE');\r\n      if (\r\n        !supportsCreateImageBitmap &&\r\n        (maxPreviewFileSize && file.size > maxPreviewFileSize)\r\n      )\r\n        return;\r\n\r\n      // set preview view\r\n      root.ref.imagePreview = view.appendChildView(\r\n        view.createChildView(imagePreviewView, { id })\r\n      );\r\n\r\n      // update height if is fixed\r\n      const fixedPreviewHeight = root.query('GET_IMAGE_PREVIEW_HEIGHT');\r\n      if (fixedPreviewHeight) {\r\n        root.dispatch('DID_UPDATE_PANEL_HEIGHT', {\r\n          id: item.id,\r\n          height: fixedPreviewHeight\r\n        });\r\n      }\r\n\r\n      // now ready\r\n      const queue =\r\n        !supportsCreateImageBitmap &&\r\n        file.size > query('GET_IMAGE_PREVIEW_MAX_INSTANT_PREVIEW_FILE_SIZE');\r\n      root.dispatch('DID_IMAGE_PREVIEW_CONTAINER_CREATE', { id }, queue);\r\n    };\r\n\r\n    const rescaleItem = (root, props) => {\r\n      if (!root.ref.imagePreview) return;\r\n\r\n      let { id } = props;\r\n\r\n      // get item\r\n      const item = root.query('GET_ITEM', { id });\r\n      if (!item) return;\r\n\r\n      // if is fixed height or panel has aspect ratio, exit here, height has already been defined\r\n      const panelAspectRatio = root.query('GET_PANEL_ASPECT_RATIO');\r\n      const itemPanelAspectRatio = root.query('GET_ITEM_PANEL_ASPECT_RATIO');\r\n      const fixedHeight = root.query('GET_IMAGE_PREVIEW_HEIGHT');\r\n      if (panelAspectRatio || itemPanelAspectRatio || fixedHeight) return;\r\n\r\n      // no data!\r\n      let { imageWidth, imageHeight } = root.ref;\r\n      if (!imageWidth || !imageHeight) return;\r\n\r\n      // get height min and max\r\n      const minPreviewHeight = root.query('GET_IMAGE_PREVIEW_MIN_HEIGHT');\r\n      const maxPreviewHeight = root.query('GET_IMAGE_PREVIEW_MAX_HEIGHT');\r\n\r\n      // orientation info\r\n      const exif = item.getMetadata('exif') || {};\r\n      const orientation = exif.orientation || -1;\r\n\r\n      // get width and height from action, and swap of orientation is incorrect\r\n      if (orientation >= 5 && orientation <= 8)\r\n        [imageWidth, imageHeight] = [imageHeight, imageWidth];\r\n\r\n      // scale up width and height when we're dealing with an SVG\r\n      if (!isBitmap(item.file) || root.query('GET_IMAGE_PREVIEW_UPSCALE')) {\r\n        const scalar = 2048 / imageWidth;\r\n        imageWidth *= scalar;\r\n        imageHeight *= scalar;\r\n      }\r\n\r\n      // image aspect ratio\r\n      const imageAspectRatio = imageHeight / imageWidth;\r\n\r\n      // we need the item to get to the crop size\r\n      const previewAspectRatio =\r\n        (item.getMetadata('crop') || {}).aspectRatio || imageAspectRatio;\r\n\r\n      // preview height range\r\n      let previewHeightMax = Math.max(\r\n        minPreviewHeight,\r\n        Math.min(imageHeight, maxPreviewHeight)\r\n      );\r\n      const itemWidth = root.rect.element.width;\r\n      const previewHeight = Math.min(\r\n        itemWidth * previewAspectRatio,\r\n        previewHeightMax\r\n      );\r\n\r\n      // request update to panel height\r\n      root.dispatch('DID_UPDATE_PANEL_HEIGHT', {\r\n        id: item.id,\r\n        height: previewHeight\r\n      });\r\n    };\r\n\r\n    const didResizeView = ({ root }) => {\r\n      // actions in next write operation\r\n      root.ref.shouldRescale = true;\r\n    };\r\n\r\n    const didUpdateItemMetadata = ({ root, action }) => {\r\n      if (action.change.key !== 'crop') return;\r\n\r\n      // actions in next write operation\r\n      root.ref.shouldRescale = true;\r\n    };\r\n\r\n    const didCalculatePreviewSize = ({ root, action }) => {\r\n      // remember dimensions\r\n      root.ref.imageWidth = action.width;\r\n      root.ref.imageHeight = action.height;\r\n\r\n      // actions in next write operation\r\n      root.ref.shouldRescale = true;\r\n      root.ref.shouldDrawPreview = true;\r\n\r\n      // as image load could take a while and fire when draw loop is resting we need to give it a kick\r\n      root.dispatch('KICK');\r\n    };\r\n\r\n    // start writing\r\n    view.registerWriter(\r\n      createRoute(\r\n        {\r\n          DID_RESIZE_ROOT: didResizeView,\r\n          DID_STOP_RESIZE: didResizeView,\r\n          DID_LOAD_ITEM: didLoadItem,\r\n          DID_IMAGE_PREVIEW_CALCULATE_SIZE: didCalculatePreviewSize,\r\n          DID_UPDATE_ITEM_METADATA: didUpdateItemMetadata\r\n        },\r\n        ({ root, props }) => {\r\n          // no preview view attached\r\n          if (!root.ref.imagePreview) return;\r\n\r\n          // don't do anything while hidden\r\n          if (root.rect.element.hidden) return;\r\n\r\n          // resize the item panel\r\n          if (root.ref.shouldRescale) {\r\n            rescaleItem(root, props);\r\n            root.ref.shouldRescale = false;\r\n          }\r\n\r\n          if (root.ref.shouldDrawPreview) {\r\n            // queue till next frame so we're sure the height has been applied this forces the draw image call inside the wrapper view to use the correct height\r\n            requestAnimationFrame(() => {\r\n              // this requestAnimationFrame nesting is horrible but it fixes an issue with 100hz displays on Chrome\r\n              // https://github.com/pqina/filepond-plugin-image-preview/issues/57\r\n              requestAnimationFrame(() => {\r\n                root.dispatch('DID_FINISH_CALCULATE_PREVIEWSIZE', {\r\n                  id: props.id\r\n                });\r\n              });\r\n            });\r\n\r\n            root.ref.shouldDrawPreview = false;\r\n          }\r\n        }\r\n      )\r\n    );\r\n  });\r\n\r\n  // expose plugin\r\n  return {\r\n    options: {\r\n      // Enable or disable image preview\r\n      allowImagePreview: [true, Type.BOOLEAN],\r\n\r\n      // filters file items to determine which are shown as preview\r\n      imagePreviewFilterItem: [() => true, Type.FUNCTION],\r\n\r\n      // Fixed preview height\r\n      imagePreviewHeight: [null, Type.INT],\r\n\r\n      // Min image height\r\n      imagePreviewMinHeight: [44, Type.INT],\r\n\r\n      // Max image height\r\n      imagePreviewMaxHeight: [256, Type.INT],\r\n\r\n      // Max size of preview file for when createImageBitmap is not supported\r\n      imagePreviewMaxFileSize: [null, Type.INT],\r\n\r\n      // The amount of extra pixels added to the image preview to allow comfortable zooming\r\n      imagePreviewZoomFactor: [2, Type.INT],\r\n\r\n      // Should we upscale small images to fit the max bounding box of the preview area\r\n      imagePreviewUpscale: [false, Type.BOOLEAN],\r\n\r\n      // Max size of preview file that we allow to try to instant preview if createImageBitmap is not supported, else image is queued for loading\r\n      imagePreviewMaxInstantPreviewFileSize: [1000000, Type.INT],\r\n\r\n      // Style of the transparancy indicator used behind images\r\n      imagePreviewTransparencyIndicator: [null, Type.STRING],\r\n\r\n      // Enables or disables reading average image color\r\n      imagePreviewCalculateAverageImageColor: [false, Type.BOOLEAN],\r\n\r\n      // Enables or disables the previewing of markup\r\n      imagePreviewMarkupShow: [true, Type.BOOLEAN],\r\n\r\n      // Allows filtering of markup to only show certain shapes\r\n      imagePreviewMarkupFilter: [() => true, Type.FUNCTION]\r\n    }\r\n  };\r\n};\r\n\r\n// fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\r\nconst isBrowser =\r\n  typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\nif (isBrowser) {\r\n  document.dispatchEvent(\r\n    new CustomEvent('FilePond:pluginloaded', { detail: plugin })\r\n  );\r\n}\r\n\r\nexport default plugin;\r\n"],
  "mappings": ";;;AASA,IAAM,qBAAqB,UAAQ,SAAS,KAAK,KAAK,IAAI;AAE1D,IAAM,iBAAiB,CAAC,GAAG,WAAW,aAAa,EAAE,IAAI,QAAQ,EAAE,IAAI,MAAM;AAE7E,IAAM,YAAY,CAAC,GAAG,MAAM,aAAa,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAE7D,IAAM,kBAAkB,OAAK;AAC3B,QAAM,IAAI,KAAK,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACzC,MAAI,MAAM,GAAG;AACX,WAAO;AAAA,MACL,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AACA,SAAO,aAAa,EAAE,IAAI,GAAG,EAAE,IAAI,CAAC;AACtC;AAEA,IAAM,eAAe,CAAC,GAAG,SAAS,WAAW;AAC3C,QAAM,MAAM,KAAK,IAAI,OAAO;AAC5B,QAAM,MAAM,KAAK,IAAI,OAAO;AAC5B,QAAM,IAAI,aAAa,EAAE,IAAI,OAAO,GAAG,EAAE,IAAI,OAAO,CAAC;AACrD,SAAO;AAAA,IACL,OAAO,IAAI,MAAM,EAAE,IAAI,MAAM,EAAE;AAAA,IAC/B,OAAO,IAAI,MAAM,EAAE,IAAI,MAAM,EAAE;AAAA,EACjC;AACF;AAEA,IAAM,eAAe,CAAC,IAAI,GAAG,IAAI,OAAO,EAAE,GAAG,EAAE;AAE/C,IAAM,iBAAiB,CAAC,OAAO,MAAM,SAAS,GAAG,SAAS;AACxD,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO,WAAW,KAAK,IAAI;AAAA,EAC7B;AACA,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO,SAAS,OAAO,KAAK,IAAI,IAAI,KAAK,IAAI,KAAK,OAAO,KAAK,MAAM;AAAA,EACtE;AACA;AACF;AAEA,IAAM,kBAAkB,CAAC,QAAQ,MAAM,UAAU;AAC/C,QAAM,YAAY,OAAO,eAAe,OAAO,aAAa;AAC5D,QAAM,OAAO,OAAO,mBAAmB,OAAO,aAAa;AAC3D,QAAM,SAAS,OAAO,eAAe,OAAO,aAAa;AACzD,QAAM,cAAc;AAAA,IAClB,OAAO,eAAe,OAAO;AAAA,IAC7B;AAAA,IACA;AAAA,EACF;AACA,QAAM,UAAU,OAAO,WAAW;AAClC,QAAM,WAAW,OAAO,YAAY;AACpC,QAAM,SACJ,OAAO,cAAc,WACjB,KACA,UAAU,IAAI,OAAK,eAAe,GAAG,MAAM,KAAK,CAAC,EAAE,KAAK,GAAG;AACjE,QAAM,UAAU,OAAO,WAAW;AAClC,SAAO;AAAA,IACL,kBAAkB;AAAA,IAClB,mBAAmB;AAAA,IACnB,gBAAgB,eAAe;AAAA,IAC/B,oBAAoB;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEA,IAAM,YAAY,WAAS,SAAS;AAEpC,IAAM,gBAAgB,CAAC,MAAM,MAAM,SAAS,MAAM;AAChD,MAAI,OACF,eAAe,KAAK,GAAG,MAAM,QAAQ,OAAO,KAC5C,eAAe,KAAK,MAAM,MAAM,QAAQ,OAAO;AACjD,MAAI,MACF,eAAe,KAAK,GAAG,MAAM,QAAQ,QAAQ,KAC7C,eAAe,KAAK,KAAK,MAAM,QAAQ,QAAQ;AACjD,MAAI,QAAQ,eAAe,KAAK,OAAO,MAAM,QAAQ,OAAO;AAC5D,MAAI,SAAS,eAAe,KAAK,QAAQ,MAAM,QAAQ,QAAQ;AAC/D,MAAI,QAAQ,eAAe,KAAK,OAAO,MAAM,QAAQ,OAAO;AAC5D,MAAI,SAAS,eAAe,KAAK,QAAQ,MAAM,QAAQ,QAAQ;AAE/D,MAAI,CAAC,UAAU,GAAG,GAAG;AACnB,QAAI,UAAU,MAAM,KAAK,UAAU,MAAM,GAAG;AAC1C,YAAM,KAAK,SAAS,SAAS;AAAA,IAC/B,OAAO;AACL,YAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI,CAAC,UAAU,IAAI,GAAG;AACpB,QAAI,UAAU,KAAK,KAAK,UAAU,KAAK,GAAG;AACxC,aAAO,KAAK,QAAQ,QAAQ;AAAA,IAC9B,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAEA,MAAI,CAAC,UAAU,KAAK,GAAG;AACrB,QAAI,UAAU,IAAI,KAAK,UAAU,KAAK,GAAG;AACvC,cAAQ,KAAK,QAAQ,OAAO;AAAA,IAC9B,OAAO;AACL,cAAQ;AAAA,IACV;AAAA,EACF;AAEA,MAAI,CAAC,UAAU,MAAM,GAAG;AACtB,QAAI,UAAU,GAAG,KAAK,UAAU,MAAM,GAAG;AACvC,eAAS,KAAK,SAAS,MAAM;AAAA,IAC/B,OAAO;AACL,eAAS;AAAA,IACX;AAAA,EACF;AAEA,SAAO;AAAA,IACL,GAAG,QAAQ;AAAA,IACX,GAAG,OAAO;AAAA,IACV,OAAO,SAAS;AAAA,IAChB,QAAQ,UAAU;AAAA,EACpB;AACF;AAEA,IAAM,oBAAoB,YACxB,OACG,IAAI,CAAC,OAAO,UAAU,GAAG,UAAU,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,EAAE,EACxE,KAAK,GAAG;AAEb,IAAM,gBAAgB,CAAC,SAAS,SAC9B,OAAO,KAAK,IAAI,EAAE,QAAQ,SAAO,QAAQ,aAAa,KAAK,KAAK,GAAG,CAAC,CAAC;AAEvE,IAAM,KAAK;AACX,IAAM,MAAM,CAAC,KAAK,SAAS;AACzB,QAAM,UAAU,SAAS,gBAAgB,IAAI,GAAG;AAChD,MAAI,MAAM;AACR,kBAAc,SAAS,IAAI;AAAA,EAC7B;AACA,SAAO;AACT;AAEA,IAAM,aAAa,aACjB,cAAc,SAAS;AAAA,EACrB,GAAG,QAAQ;AAAA,EACX,GAAG,QAAQ;AACb,CAAC;AAEH,IAAM,gBAAgB,aAAW;AAC/B,QAAM,KAAK,QAAQ,KAAK,IAAI,QAAQ,KAAK,QAAQ;AACjD,QAAM,KAAK,QAAQ,KAAK,IAAI,QAAQ,KAAK,SAAS;AAClD,QAAM,KAAK,QAAQ,KAAK,QAAQ;AAChC,QAAM,KAAK,QAAQ,KAAK,SAAS;AACjC,SAAO,cAAc,SAAS;AAAA,IAC5B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG,QAAQ;AAAA,EACb,CAAC;AACH;AAEA,IAAM,kBAAkB;AAAA,EACtB,SAAS;AAAA,EACT,OAAO;AACT;AAEA,IAAM,cAAc,CAAC,SAAS,WAAW;AACvC,gBAAc,SAAS;AAAA,IACrB,GAAG,QAAQ;AAAA,IACX,GAAG,QAAQ;AAAA,IACX,qBAAqB,gBAAgB,OAAO,GAAG,KAAK;AAAA,EACtD,CAAC;AACH;AAEA,IAAM,cAAc;AAAA,EAClB,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,OAAO;AACT;AAEA,IAAM,aAAa,CAAC,SAAS,QAAQ,MAAM,UAAU;AACnD,QAAM,WAAW,eAAe,OAAO,UAAU,MAAM,KAAK;AAC5D,QAAM,aAAa,OAAO,cAAc;AACxC,QAAM,aAAa,OAAO,cAAc;AACxC,QAAM,YAAY,YAAY,OAAO,SAAS,KAAK;AAEnD,gBAAc,SAAS;AAAA,IACrB,GAAG,QAAQ;AAAA,IACX,GAAG,QAAQ;AAAA,IACX,gBAAgB;AAAA,IAChB,eAAe;AAAA,IACf,aAAa;AAAA,IACb,eAAe;AAAA,IACf,eAAe;AAAA,EACjB,CAAC;AAGD,MAAI,QAAQ,SAAS,OAAO,MAAM;AAChC,YAAQ,OAAO,OAAO;AACtB,YAAQ,cAAc,OAAO,KAAK,SAAS,OAAO,OAAO;AAAA,EAC3D;AACF;AAEA,IAAM,aAAa,CAAC,SAAS,QAAQ,MAAM,UAAU;AACnD,gBAAc,SAAS;AAAA,IACrB,GAAG,QAAQ;AAAA,IACX,GAAG,QAAQ;AAAA,IACX,MAAM;AAAA,EACR,CAAC;AAED,QAAM,OAAO,QAAQ,WAAW,CAAC;AACjC,QAAM,QAAQ,QAAQ,WAAW,CAAC;AAClC,QAAM,MAAM,QAAQ,WAAW,CAAC;AAEhC,QAAM,SAAS,QAAQ;AAEvB,QAAM,SAAS;AAAA,IACb,GAAG,QAAQ,KAAK,IAAI,QAAQ,KAAK;AAAA,IACjC,GAAG,QAAQ,KAAK,IAAI,QAAQ,KAAK;AAAA,EACnC;AAEA,gBAAc,MAAM;AAAA,IAClB,IAAI,OAAO;AAAA,IACX,IAAI,OAAO;AAAA,IACX,IAAI,OAAO;AAAA,IACX,IAAI,OAAO;AAAA,EACb,CAAC;AAED,MAAI,CAAC,OAAO,eAAgB;AAE5B,QAAM,MAAM,UAAU;AACtB,MAAI,MAAM,UAAU;AAEpB,QAAM,IAAI,gBAAgB;AAAA,IACxB,GAAG,OAAO,IAAI,OAAO;AAAA,IACrB,GAAG,OAAO,IAAI,OAAO;AAAA,EACvB,CAAC;AAED,QAAM,IAAI,eAAe,MAAM,MAAM,KAAK;AAE1C,MAAI,OAAO,eAAe,QAAQ,aAAa,MAAM,IAAI;AACvD,UAAM,0BAA0B,eAAe,GAAG,CAAC;AACnD,UAAM,mBAAmB,UAAU,QAAQ,uBAAuB;AAClE,UAAM,cAAc,aAAa,QAAQ,GAAG,gBAAgB;AAC5D,UAAM,cAAc,aAAa,QAAQ,IAAI,gBAAgB;AAE7D,kBAAc,OAAO;AAAA,MACnB,OAAO;AAAA,MACP,GAAG,IAAI,YAAY,CAAC,IAAI,YAAY,CAAC,KAAK,OAAO,CAAC,IAAI,OAAO,CAAC,KAC5D,YAAY,CACd,IAAI,YAAY,CAAC;AAAA,IACnB,CAAC;AAAA,EACH;AAEA,MAAI,OAAO,eAAe,QAAQ,WAAW,MAAM,IAAI;AACrD,UAAM,wBAAwB,eAAe,GAAG,CAAC,CAAC;AAClD,UAAM,iBAAiB,UAAU,QAAQ,qBAAqB;AAC9D,UAAM,YAAY,aAAa,QAAQ,GAAG,cAAc;AACxD,UAAM,YAAY,aAAa,QAAQ,IAAI,cAAc;AAEzD,kBAAc,KAAK;AAAA,MACjB,OAAO;AAAA,MACP,GAAG,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,KAAK,OAAO,CAAC,IAAI,OAAO,CAAC,KACxD,UAAU,CACZ,IAAI,UAAU,CAAC;AAAA,IACjB,CAAC;AAAA,EACH;AACF;AAEA,IAAM,aAAa,CAAC,SAAS,QAAQ,MAAM,UAAU;AACnD,gBAAc,SAAS;AAAA,IACrB,GAAG,QAAQ;AAAA,IACX,MAAM;AAAA,IACN,GAAG;AAAA,MACD,OAAO,OAAO,IAAI,YAAU;AAAA,QAC1B,GAAG,eAAe,MAAM,GAAG,MAAM,OAAO,OAAO;AAAA,QAC/C,GAAG,eAAe,MAAM,GAAG,MAAM,OAAO,QAAQ;AAAA,MAClD,EAAE;AAAA,IACJ;AAAA,EACF,CAAC;AACH;AAEA,IAAM,cAAc,UAAQ,YAAU,IAAI,MAAM,EAAE,IAAI,OAAO,GAAG,CAAC;AAEjE,IAAM,cAAc,YAAU;AAC5B,QAAM,QAAQ,IAAI,SAAS;AAAA,IACzB,IAAI,OAAO;AAAA,IACX,kBAAkB;AAAA,IAClB,mBAAmB;AAAA,IACnB,SAAS;AAAA,EACX,CAAC;AACD,QAAM,SAAS,MAAM;AACnB,UAAM,aAAa,WAAW,OAAO,WAAW,CAAC;AAAA,EACnD;AACA,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,OAAO;AAAA,EACT;AACA,SAAO;AACT;AAEA,IAAM,aAAa,YAAU;AAC3B,QAAM,QAAQ,IAAI,KAAK;AAAA,IACrB,IAAI,OAAO;AAAA,IACX,kBAAkB;AAAA,IAClB,mBAAmB;AAAA,EACrB,CAAC;AAED,QAAM,OAAO,IAAI,MAAM;AACvB,QAAM,YAAY,IAAI;AAEtB,QAAM,QAAQ,IAAI,MAAM;AACxB,QAAM,YAAY,KAAK;AAEvB,QAAM,MAAM,IAAI,MAAM;AACtB,QAAM,YAAY,GAAG;AAErB,SAAO;AACT;AAEA,IAAM,qBAAqB;AAAA,EACzB,OAAO;AAAA,EACP,MAAM,YAAY,MAAM;AAAA,EACxB,SAAS,YAAY,SAAS;AAAA,EAC9B,MAAM,YAAY,MAAM;AAAA,EACxB,MAAM,YAAY,MAAM;AAAA,EACxB,MAAM;AACR;AAEA,IAAM,qBAAqB;AAAA,EACzB,MAAM;AAAA,EACN,SAAS;AAAA,EACT,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AACR;AAEA,IAAM,qBAAqB,CAAC,MAAM,WAAW,mBAAmB,IAAI,EAAE,MAAM;AAE5E,IAAM,qBAAqB,CAAC,SAAS,MAAM,QAAQ,MAAM,UAAU;AACjE,MAAI,SAAS,QAAQ;AACnB,YAAQ,OAAO,cAAc,QAAQ,MAAM,KAAK;AAAA,EAClD;AACA,UAAQ,SAAS,gBAAgB,QAAQ,MAAM,KAAK;AACpD,qBAAmB,IAAI,EAAE,SAAS,QAAQ,MAAM,KAAK;AACvD;AAEA,IAAM,cAAc;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAM,qBAAqB,WACzB,OAAO,UAAU,YAAY,IAAI,KAAK,KAAK,IACvC,WAAW,KAAK,IAAI,MACpB;AAGN,IAAM,gBAAgB,YAAU;AAC9B,QAAM,CAAC,MAAM,KAAK,IAAI;AAEtB,QAAM,OAAO,MAAM,SACf,CAAC,IACD,YAAY,OAAO,CAAC,MAAM,SAAS;AACjC,SAAK,IAAI,IAAI,mBAAmB,MAAM,IAAI,CAAC;AAC3C,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AAET,SAAO;AAAA,IACL;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AACF;AAEA,IAAM,qBAAqB,CAAC,GAAG,MAAM;AACnC,MAAI,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,QAAQ;AAC7B,WAAO;AAAA,EACT;AACA,MAAI,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,QAAQ;AAC7B,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAEA,IAAM,mBAAmB,OACvB,EAAE,MAAM,WAAW;AAAA,EACjB,MAAM;AAAA,EACN,KAAK;AAAA,EACL,YAAY;AAAA,EACZ,QAAQ;AAAA,IACN,MAAM,CAAC,SAAS,UAAU,QAAQ,UAAU,UAAU,OAAO;AAAA,EAC/D;AAAA,EACA,OAAO,CAAC,EAAE,MAAM,MAAM,MAAM;AAC1B,QAAI,CAAC,MAAM,MAAO;AAElB,UAAM,EAAE,MAAM,QAAQ,OAAO,IAAI;AAEjC,UAAM,YAAY,MAAM;AACxB,UAAM,aAAa,MAAM;AAEzB,QAAI,YAAY,KAAK;AACrB,QAAI,aAAa,KAAK;AAEtB,QAAI,QAAQ;AACV,YAAM,EAAE,MAAAA,MAAK,IAAI;AAEjB,UAAI,cAAcA,SAAQA,MAAK;AAC/B,UAAI,eAAeA,SAAQA,MAAK;AAChC,YAAM,YAAY,OAAO;AACzB,YAAM,gBAAgB,OAAO;AAE7B,UAAI,eAAe,CAAC,aAAc,gBAAe;AACjD,UAAI,gBAAgB,CAAC,YAAa,eAAc;AAEhD,YAAM,gBACJ,YAAY,eAAe,aAAa;AAE1C,UAAI,CAAC,iBAAkB,iBAAiB,eAAgB;AACtD,YAAI,cAAc,cAAc;AAChC,YAAI,eAAe,eAAe;AAElC,YAAI,cAAc,SAAS;AACzB,sBAAY;AACZ,uBAAa;AAAA,QACf,OAAO;AACL,cAAI;AACJ,cAAI,cAAc,SAAS;AACzB,qBAAS,KAAK,IAAI,aAAa,YAAY;AAAA,UAC7C,WAAW,cAAc,WAAW;AAClC,qBAAS,KAAK,IAAI,aAAa,YAAY;AAAA,UAC7C;AACA,sBAAY,YAAY;AACxB,uBAAa,aAAa;AAAA,QAC5B;AAAA,MACF;AAAA,IACF;AAEA,UAAM,OAAO;AAAA,MACX,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAEA,SAAK,QAAQ,aAAa,SAAS,KAAK,KAAK;AAC7C,SAAK,QAAQ,aAAa,UAAU,KAAK,MAAM;AAE/C,UAAM,QAAQ,KAAK,IAAI,YAAY,WAAW,aAAa,UAAU;AAGrE,SAAK,QAAQ,YAAY;AAGzB,UAAM,eAAe,KAAK,MAAM,iCAAiC;AAGjE,WACG,OAAO,YAAY,EACnB,IAAI,aAAa,EACjB,KAAK,kBAAkB,EACvB,QAAQ,CAAAC,YAAU;AACjB,YAAM,CAAC,MAAM,QAAQ,IAAIA;AAGzB,YAAM,UAAU,mBAAmB,MAAM,QAAQ;AAGjD,yBAAmB,SAAS,MAAM,UAAU,MAAM,KAAK;AAGvD,WAAK,QAAQ,YAAY,OAAO;AAAA,IAClC,CAAC;AAAA,EACL;AACF,CAAC;AAEH,IAAM,iBAAiB,CAAC,GAAG,OAAO,EAAE,GAAG,EAAE;AAEzC,IAAM,YAAY,CAAC,GAAG,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAEhD,IAAM,iBAAiB,CAAC,GAAG,MAAM,eAAe,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAEpE,IAAM,wBAAwB,CAAC,GAAG,MAChC,UAAU,eAAe,GAAG,CAAC,GAAG,eAAe,GAAG,CAAC,CAAC;AAEtD,IAAM,iBAAiB,CAAC,GAAG,MAAM,KAAK,KAAK,sBAAsB,GAAG,CAAC,CAAC;AAEtE,IAAM,uBAAuB,CAAC,QAAQ,aAAa;AACjD,QAAM,IAAI;AAEV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI,qBAAqB;AAE/B,QAAM,OAAO,KAAK,IAAI,CAAC;AACvB,QAAM,OAAO,KAAK,IAAI,CAAC;AACvB,QAAM,OAAO,KAAK,IAAI,CAAC;AACvB,QAAM,OAAO,KAAK,IAAI,CAAC;AACvB,QAAM,QAAQ,IAAI;AAClB,QAAM,IAAI,QAAQ;AAClB,QAAM,IAAI,QAAQ;AAElB,SAAO,eAAe,OAAO,GAAG,OAAO,CAAC;AAC1C;AAEA,IAAM,qBAAqB,CAAC,MAAM,aAAa;AAC7C,QAAM,IAAI,KAAK;AACf,QAAM,IAAI,KAAK;AAEf,QAAM,MAAM,qBAAqB,GAAG,QAAQ;AAC5C,QAAM,MAAM,qBAAqB,GAAG,QAAQ;AAE5C,QAAM,KAAK,eAAe,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,CAAC;AAE5E,QAAM,KAAK;AAAA,IACT,KAAK,IAAI,KAAK,QAAQ,KAAK,IAAI,IAAI,CAAC;AAAA,IACpC,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC;AAAA,EACzB;AAEA,QAAM,KAAK;AAAA,IACT,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC;AAAA,IACvB,KAAK,IAAI,KAAK,SAAS,KAAK,IAAI,IAAI,CAAC;AAAA,EACvC;AAEA,SAAO;AAAA,IACL,OAAO,eAAe,IAAI,EAAE;AAAA,IAC5B,QAAQ,eAAe,IAAI,EAAE;AAAA,EAC/B;AACF;AAEA,IAAM,sBAAsB,CAAC,OAAO,mBAAmB,OAAO,MAAM;AAClE,QAAM,mBAAmB,MAAM,SAAS,MAAM;AAG9C,MAAI,cAAc;AAClB,MAAI,eAAe;AACnB,MAAI,WAAW;AACf,MAAI,YAAY;AAChB,MAAI,YAAY,cAAc;AAC5B,gBAAY;AACZ,eAAW,YAAY;AAAA,EACzB;AAEA,QAAM,SAAS,KAAK,IAAI,cAAc,UAAU,eAAe,SAAS;AACxE,QAAM,QAAQ,MAAM,SAAS,OAAO,SAAS;AAC7C,QAAM,SAAS,QAAQ;AAEvB,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAEA,IAAM,yBAAyB,CAAC,WAAW,UAAU,UAAU,WAAW;AAExE,QAAM,KAAK,OAAO,IAAI,MAAM,IAAI,OAAO,IAAI,OAAO;AAClD,QAAM,KAAK,OAAO,IAAI,MAAM,IAAI,OAAO,IAAI,OAAO;AAClD,QAAM,aAAa,KAAK,IAAI,UAAU;AACtC,QAAM,cAAc,KAAK,IAAI,UAAU;AAGvC,QAAM,kBAAkB,mBAAmB,UAAU,QAAQ;AAG7D,SAAO,KAAK;AAAA,IACV,gBAAgB,QAAQ;AAAA,IACxB,gBAAgB,SAAS;AAAA,EAC3B;AACF;AAEA,IAAM,sBAAsB,CAAC,WAAW,gBAAgB;AACtD,MAAI,QAAQ,UAAU;AACtB,MAAI,SAAS,QAAQ;AACrB,MAAI,SAAS,UAAU,QAAQ;AAC7B,aAAS,UAAU;AACnB,YAAQ,SAAS;AAAA,EACnB;AACA,QAAM,KAAK,UAAU,QAAQ,SAAS;AACtC,QAAM,KAAK,UAAU,SAAS,UAAU;AAExC,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEA,IAAM,qBAAqB,CAAC,WAAW,OAAO,CAAC,MAAM;AACnD,MAAI,EAAE,MAAM,UAAU,QAAQ,YAAY,IAAI;AAE9C,MAAI,CAAC,YAAa,eAAc,UAAU,SAAS,UAAU;AAE7D,QAAM,aAAa,oBAAoB,WAAW,aAAa,IAAI;AAEnE,QAAM,eAAe;AAAA,IACnB,GAAG,WAAW,QAAQ;AAAA,IACtB,GAAG,WAAW,SAAS;AAAA,EACzB;AAEA,QAAM,QAAQ;AAAA,IACZ,GAAG;AAAA,IACH,GAAG;AAAA,IACH,OAAO,WAAW;AAAA,IAClB,QAAQ,WAAW;AAAA,IACnB,QAAQ;AAAA,EACV;AAEA,QAAM,cAAc,OAAO,KAAK,eAAe,eAAe,KAAK;AAEnE,QAAM,kBAAkB;AAAA,IACtB;AAAA,IACA,oBAAoB,OAAO,WAAW;AAAA,IACtC;AAAA,IACA,cAAc,SAAS,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,EAC1C;AAEA,QAAM,QAAQ,OAAO;AAGrB,SAAO;AAAA,IACL,YAAY,WAAW,QAAQ;AAAA,IAC/B,aAAa,WAAW,SAAS;AAAA,IACjC,OAAO,KAAK,MAAM,WAAW,QAAQ,KAAK;AAAA,IAC1C,QAAQ,KAAK,MAAM,WAAW,SAAS,KAAK;AAAA,EAC9C;AACF;AAEA,IAAM,2BAA2B;AAAA,EAC/B,MAAM;AAAA,EACN,WAAW;AAAA,EACX,SAAS;AAAA,EACT,MAAM;AACR;AAGA,IAAM,mBAAmB,OACvB,EAAE,MAAM,WAAW;AAAA,EACjB,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,QAAQ,EAAE,QAAQ,CAAC,UAAU,QAAQ,EAAE;AAAA,EACvC,QAAQ,CAAC,EAAE,MAAM,MAAM,MAAM;AAC3B,SAAK,YAAY,MAAM,KAAK;AAAA,EAC9B;AACF,CAAC;AAGH,IAAM,2BAA2B,OAC/B,EAAE,MAAM,WAAW;AAAA,EACjB,MAAM;AAAA,EACN,KAAK;AAAA,EACL,YAAY;AAAA,EACZ,QAAQ;AAAA,IACN,MAAM,CAAC,QAAQ,SAAS,QAAQ;AAAA,IAChC,QAAQ;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV,SAAS;AAAA,MACT,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,QAAQ,CAAC,EAAE,MAAM,MAAM,MAAM;AAC3B,UAAM,QAAQ,MAAM,MAAM;AAC1B,UAAM,SAAS,MAAM,MAAM;AAC3B,SAAK,IAAI,SAAS,KAAK;AAAA,MACrB,KAAK,gBAAgB,iBAAiB,CAAC,GAAG,EAAE,OAAO,MAAM,MAAM,CAAC;AAAA,IAClE;AAAA,EACF;AAAA,EACA,OAAO,CAAC,EAAE,MAAM,MAAM,MAAM;AAC1B,UAAM,EAAE,KAAK,IAAI,MAAM;AACvB,UAAM,EAAE,OAAO,IAAI,KAAK;AACxB,WAAO,SAAS,KAAK,aAAa,KAAK;AACvC,WAAO,SAAS,KAAK,WAAW,KAAK;AAAA,EACvC;AACF,CAAC;AAGH,IAAM,iBAAiB,OACrB,EAAE,MAAM,WAAW;AAAA,EACjB,MAAM;AAAA,EACN,KAAK;AAAA,EACL,YAAY;AAAA,EACZ,QAAQ;AAAA,IACN,MAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,QAAQ,CAAC,SAAS,UAAU,SAAS;AAAA,IACrC,YAAY;AAAA,MACV,SAAS,EAAE,MAAM,SAAS,UAAU,IAAI;AAAA,IAC1C;AAAA,EACF;AAAA,EACA,cAAc,SAAS,EAAE,MAAM,MAAM,GAAG;AACtC,QAAI,CAAC,MAAM,WAAY;AACvB,SAAK,QAAQ,MAAM,kBAAkB,MAAM;AAAA,EAC7C;AAAA,EACA,QAAQ,CAAC,EAAE,MAAM,MAAM,MAAM;AAC3B,SAAK,IAAI,QAAQ,KAAK;AAAA,MACpB,KAAK;AAAA,QACH,yBAAyB,CAAC;AAAA,QAC1B,OAAO,OAAO,CAAC,GAAG,KAAK;AAAA,MACzB;AAAA,IACF;AAEA,SAAK,IAAI,eAAe,MAAM;AAC5B,UAAI,KAAK,IAAI,OAAQ;AACrB,WAAK,IAAI,SAAS,KAAK;AAAA,QACrB,KAAK,gBAAgB,iBAAiB,CAAC,GAAG,OAAO,OAAO,CAAC,GAAG,KAAK,CAAC;AAAA,MACpE;AAAA,IACF;AAEA,SAAK,IAAI,gBAAgB,MAAM;AAC7B,UAAI,CAAC,KAAK,IAAI,OAAQ;AACtB,WAAK,gBAAgB,KAAK,IAAI,MAAM;AACpC,WAAK,IAAI,SAAS;AAAA,IACpB;AAGA,UAAM,wBAAwB,KAAK;AAAA,MACjC;AAAA,IACF;AACA,QAAI,0BAA0B,KAAM;AAGpC,QAAI,0BAA0B,QAAQ;AACpC,WAAK,QAAQ,QAAQ,wBAAwB;AAAA,IAC/C,OAEK;AACH,WAAK,QAAQ,QAAQ,wBAAwB;AAAA,IAC/C;AAAA,EACF;AAAA,EACA,OAAO,CAAC,EAAE,MAAM,OAAO,eAAe,MAAM;AAC1C,UAAM,EAAE,MAAM,QAAQ,QAAQ,OAAO,OAAO,OAAO,IAAI;AAEvD,SAAK,IAAI,MAAM,OAAO;AAEtB,UAAM,QAAQ;AAAA,MACZ,GAAG;AAAA,MACH,GAAG;AAAA,MACH;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,QACN,GAAG,QAAQ;AAAA,QACX,GAAG,SAAS;AAAA,MACd;AAAA,IACF;AAEA,UAAM,QAAQ;AAAA,MACZ,OAAO,KAAK,IAAI,MAAM;AAAA,MACtB,QAAQ,KAAK,IAAI,MAAM;AAAA,IACzB;AAEA,UAAM,SAAS;AAAA,MACb,GAAG,KAAK,OAAO,IAAI,MAAM;AAAA,MACzB,GAAG,KAAK,OAAO,IAAI,MAAM;AAAA,IAC3B;AAEA,UAAM,cAAc;AAAA,MAClB,GAAG,MAAM,OAAO,IAAI,MAAM,QAAQ,KAAK,OAAO;AAAA,MAC9C,GAAG,MAAM,OAAO,IAAI,MAAM,SAAS,KAAK,OAAO;AAAA,IACjD;AAEA,UAAM,WAAW,KAAK,KAAK,IAAK,KAAK,YAAY,KAAK,KAAK;AAE3D,UAAM,kBAAkB,KAAK,eAAe,MAAM,SAAS,MAAM;AAEjE,UAAM,cACJ,OAAO,KAAK,eAAe,eAAe,KAAK;AAEjD,UAAM,kBAAkB;AAAA,MACtB;AAAA,MACA,oBAAoB,OAAO,eAAe;AAAA,MAC1C;AAAA,MACA,cAAc,KAAK,SAAS,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/C;AAEA,UAAM,QAAQ,KAAK,OAAO;AAG1B,QAAI,UAAU,OAAO,QAAQ;AAC3B,WAAK,IAAI,aAAa;AACtB,WAAK,IAAI,OAAO,QAAQ;AACxB,WAAK,IAAI,OAAO,SAAS;AACzB,WAAK,IAAI,OAAO,SAAS;AACzB,WAAK,IAAI,OAAO,QAAQ;AACxB,WAAK,IAAI,OAAO,SAAS;AACzB,WAAK,IAAI,OAAO,OAAO,mBAAmB,OAAO,IAAI;AAAA,IACvD,WAAW,KAAK,IAAI,QAAQ;AAC1B,WAAK,IAAI,cAAc;AAAA,IACzB;AAGA,UAAM,YAAY,KAAK,IAAI;AAG3B,QAAI,gBAAgB;AAClB,gBAAU,UAAU;AACpB,gBAAU,UAAU;AACpB,gBAAU,aAAa;AACvB,gBAAU,aAAa;AACvB,gBAAU,UAAU;AACpB,gBAAU,SAAS;AACnB,gBAAU,SAAS;AACnB;AAAA,IACF;AAEA,cAAU,UAAU,OAAO;AAC3B,cAAU,UAAU,OAAO;AAC3B,cAAU,aAAa,YAAY;AACnC,cAAU,aAAa,YAAY;AACnC,cAAU,UAAU;AACpB,cAAU,SAAS;AACnB,cAAU,SAAS;AAAA,EACrB;AACF,CAAC;AAEH,IAAM,kBAAkB,OACtB,EAAE,MAAM,WAAW;AAAA,EACjB,MAAM;AAAA,EACN,KAAK;AAAA,EACL,YAAY;AAAA,EACZ,QAAQ;AAAA,IACN,MAAM,CAAC,SAAS,QAAQ,UAAU,UAAU,SAAS,YAAY;AAAA,IACjE,QAAQ,CAAC,cAAc,UAAU,UAAU,SAAS;AAAA,IACpD,YAAY;AAAA,MACV,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,SAAS,EAAE,MAAM,SAAS,UAAU,IAAI;AAAA,IAC1C;AAAA,EACF;AAAA,EACA,QAAQ,CAAC,EAAE,MAAM,MAAM,MAAM;AAC3B,SAAK,IAAI,OAAO,KAAK;AAAA,MACnB,KAAK,gBAAgB,eAAe,CAAC,GAAG;AAAA,QACtC,IAAI,MAAM;AAAA,QACV,OAAO,MAAM;AAAA,QACb,MAAM,MAAM;AAAA,QACZ,QAAQ,MAAM;AAAA,QACd,QAAQ,MAAM;AAAA,QACd,OAAO,MAAM;AAAA,QACb,YAAY,MAAM;AAAA,MACpB,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,OAAO,CAAC,EAAE,MAAM,OAAO,eAAe,MAAM;AAC1C,UAAM,EAAE,KAAK,IAAI,KAAK;AAEtB,UAAM,EAAE,OAAO,MAAM,QAAQ,QAAQ,MAAM,IAAI;AAE/C,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,QAAQ;AAGb,SAAK,UAAU,iBAAiB,IAAI;AAGpC,QAAI,kBAAkB,KAAK,KAAK,QAAQ,OAAQ;AAGhD,UAAM,mBAAmB,MAAM,SAAS,MAAM;AAC9C,QAAI,cAAc,KAAK,eAAe;AAGtC,UAAM,iBAAiB,KAAK,KAAK,MAAM;AACvC,UAAM,kBAAkB,KAAK,KAAK,MAAM;AAExC,QAAI,qBAAqB,KAAK,MAAM,0BAA0B;AAC9D,UAAM,mBAAmB,KAAK,MAAM,8BAA8B;AAClE,UAAM,mBAAmB,KAAK,MAAM,8BAA8B;AAElE,UAAM,mBAAmB,KAAK,MAAM,wBAAwB;AAC5D,UAAM,gBAAgB,KAAK,MAAM,oBAAoB;AAErD,QAAI,oBAAoB,CAAC,eAAe;AACtC,2BAAqB,iBAAiB;AACtC,oBAAc;AAAA,IAChB;AAGA,QAAI,aACF,uBAAuB,OACnB,qBACA,KAAK;AAAA,MACH;AAAA,MACA,KAAK,IAAI,iBAAiB,aAAa,gBAAgB;AAAA,IACzD;AAEN,QAAI,YAAY,aAAa;AAC7B,QAAI,YAAY,gBAAgB;AAC9B,kBAAY;AACZ,mBAAa,YAAY;AAAA,IAC3B;AAEA,QAAI,aAAa,iBAAiB;AAChC,mBAAa;AACb,kBAAY,kBAAkB;AAAA,IAChC;AAEA,SAAK,QAAQ;AACb,SAAK,SAAS;AAAA,EAChB;AACF,CAAC;AAEH,IAAI,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBf,IAAI,kBAAkB;AAEtB,IAAM,yBAAyB,WAC7B,MAAM,MAAM,WAAW;AAAA,EACrB,MAAM;AAAA,EACN,KAAK;AAAA,EACL,YAAY;AAAA,EACZ,QAAQ,CAAC,EAAE,MAAM,MAAM,MAAM;AAC3B,QAAI,OAAO;AACX,QAAI,SAAS,cAAc,MAAM,GAAG;AAClC,YAAM,MAAM,IAAI;AAAA,QACd,OAAO,SAAS,KAAK,QAAQ,OAAO,SAAS,MAAM,EAAE;AAAA,MACvD,EAAE;AACF,aAAO,KAAK,QAAQ,YAAY,SAAS,MAAM,GAAG;AAAA,IACpD;AAEA;AACA,SAAK,QAAQ,UAAU;AAAA,MACrB,mCAAmC,MAAM,MAAM;AAAA,IACjD;AACA,SAAK,QAAQ,YAAY,KAAK,QAAQ,YAAY,eAAe;AAAA,EACnE;AAAA,EACA,QAAQ;AAAA,IACN,QAAQ,CAAC,SAAS;AAAA,IAClB,YAAY;AAAA,MACV,SAAS,EAAE,MAAM,UAAU,MAAM,GAAG;AAAA,IACtC;AAAA,EACF;AACF,CAAC;AAKH,IAAM,eAAe,WAAW;AAC9B,OAAK,YAAY,OAAK;AACpB,sBAAkB,EAAE,KAAK,QAAQ,IAAI,EAAE,KAAK,YAAU;AACpD,WAAK,YAAY,EAAE,IAAI,EAAE,KAAK,IAAI,SAAS,OAAO,GAAG,CAAC,MAAM,CAAC;AAAA,IAC/D,CAAC;AAAA,EACH;AACF;AAKA,IAAM,oBAAoB,WAAW;AACnC,OAAK,YAAY,OAAK;AACpB,UAAM,YAAY,EAAE,KAAK,QAAQ;AACjC,UAAM,SAAS,EAAE,KAAK,QAAQ;AAE9B,UAAMC,QAAO,UAAU;AACvB,UAAM,IAAIA,MAAK;AAEf,UAAM,MAAM,OAAO,CAAC;AACpB,UAAM,MAAM,OAAO,CAAC;AACpB,UAAM,MAAM,OAAO,CAAC;AACpB,UAAM,MAAM,OAAO,CAAC;AACpB,UAAM,MAAM,OAAO,CAAC;AAEpB,UAAM,MAAM,OAAO,CAAC;AACpB,UAAM,MAAM,OAAO,CAAC;AACpB,UAAM,MAAM,OAAO,CAAC;AACpB,UAAM,MAAM,OAAO,CAAC;AACpB,UAAM,MAAM,OAAO,CAAC;AAEpB,UAAM,MAAM,OAAO,EAAE;AACrB,UAAM,MAAM,OAAO,EAAE;AACrB,UAAM,MAAM,OAAO,EAAE;AACrB,UAAM,MAAM,OAAO,EAAE;AACrB,UAAM,MAAM,OAAO,EAAE;AAErB,UAAM,MAAM,OAAO,EAAE;AACrB,UAAM,MAAM,OAAO,EAAE;AACrB,UAAM,MAAM,OAAO,EAAE;AACrB,UAAM,MAAM,OAAO,EAAE;AACrB,UAAM,MAAM,OAAO,EAAE;AAErB,QAAI,QAAQ,GACV,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI;AAEN,WAAO,QAAQ,GAAG,SAAS,GAAG;AAC5B,UAAIA,MAAK,KAAK,IAAI;AAClB,UAAIA,MAAK,QAAQ,CAAC,IAAI;AACtB,UAAIA,MAAK,QAAQ,CAAC,IAAI;AACtB,UAAIA,MAAK,QAAQ,CAAC,IAAI;AACtB,MAAAA,MAAK,KAAK,IAAI,KAAK;AAAA,QACjB;AAAA,QACA,KAAK,KAAK,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,KAAK,GAAG;AAAA,MACnE;AACA,MAAAA,MAAK,QAAQ,CAAC,IAAI,KAAK;AAAA,QACrB;AAAA,QACA,KAAK,KAAK,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,KAAK,GAAG;AAAA,MACnE;AACA,MAAAA,MAAK,QAAQ,CAAC,IAAI,KAAK;AAAA,QACrB;AAAA,QACA,KAAK,KAAK,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,KAAK,GAAG;AAAA,MACnE;AACA,MAAAA,MAAK,QAAQ,CAAC,IAAI,KAAK;AAAA,QACrB;AAAA,QACA,KAAK,KAAK,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,KAAK,GAAG;AAAA,MACnE;AAAA,IACF;AAEA,SAAK,YAAY,EAAE,IAAI,EAAE,KAAK,IAAI,SAAS,UAAU,GAAG;AAAA,MACtD,UAAU,KAAK;AAAA,IACjB,CAAC;AAAA,EACH;AACF;AAEA,IAAM,eAAe,CAAC,KAAK,OAAO;AAChC,MAAI,QAAQ,IAAI,MAAM;AACtB,QAAM,SAAS,MAAM;AACnB,UAAM,QAAQ,MAAM;AACpB,UAAM,SAAS,MAAM;AACrB,YAAQ;AACR,OAAG,OAAO,MAAM;AAAA,EAClB;AACA,QAAM,MAAM;AACd;AAEA,IAAM,aAAa;AAAA,EACjB,GAAG,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAC1B,GAAG,WAAS,CAAC,IAAI,GAAG,GAAG,GAAG,OAAO,CAAC;AAAA,EAClC,GAAG,CAAC,OAAO,WAAW,CAAC,IAAI,GAAG,GAAG,IAAI,OAAO,MAAM;AAAA,EAClD,GAAG,CAAC,OAAO,WAAW,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,MAAM;AAAA,EAC7C,GAAG,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAC1B,GAAG,CAAC,OAAO,WAAW,CAAC,GAAG,GAAG,IAAI,GAAG,QAAQ,CAAC;AAAA,EAC7C,GAAG,CAAC,OAAO,WAAW,CAAC,GAAG,IAAI,IAAI,GAAG,QAAQ,KAAK;AAAA,EAClD,GAAG,WAAS,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,KAAK;AACpC;AAEA,IAAM,sBAAsB,CAAC,KAAK,OAAO,QAAQ,gBAAgB;AAE/D,MAAI,gBAAgB,IAAI;AACtB;AAAA,EACF;AAEA,MAAI,UAAU,MAAM,KAAK,WAAW,WAAW,EAAE,OAAO,MAAM,CAAC;AACjE;AAGA,IAAM,qBAAqB,CAACA,OAAM,OAAO,QAAQ,gBAAgB;AAE/D,UAAQ,KAAK,MAAM,KAAK;AACxB,WAAS,KAAK,MAAM,MAAM;AAG1B,QAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,SAAO,QAAQ;AACf,SAAO,SAAS;AAChB,QAAM,MAAM,OAAO,WAAW,IAAI;AAGlC,MAAI,eAAe,KAAK,eAAe,GAAG;AACxC,KAAC,OAAO,MAAM,IAAI,CAAC,QAAQ,KAAK;AAAA,EAClC;AAGA,sBAAoB,KAAK,OAAO,QAAQ,WAAW;AAGnD,MAAI,UAAUA,OAAM,GAAG,GAAG,OAAO,MAAM;AAEvC,SAAO;AACT;AAEA,IAAM,WAAW,UAAQ,SAAS,KAAK,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,KAAK,IAAI;AAE1E,IAAM,YAAY;AAClB,IAAM,aAAa;AAEnB,IAAM,wBAAwB,WAAS;AACrC,QAAM,SAAS,KAAK,IAAI,YAAY,MAAM,OAAO,aAAa,MAAM,MAAM;AAE1E,QAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,QAAM,MAAM,OAAO,WAAW,IAAI;AAClC,QAAM,QAAS,OAAO,QAAQ,KAAK,KAAK,MAAM,QAAQ,MAAM;AAC5D,QAAM,SAAU,OAAO,SAAS,KAAK,KAAK,MAAM,SAAS,MAAM;AAC/D,MAAI,UAAU,OAAO,GAAG,GAAG,OAAO,MAAM;AACxC,MAAIA,QAAO;AACX,MAAI;AACF,IAAAA,QAAO,IAAI,aAAa,GAAG,GAAG,OAAO,MAAM,EAAE;AAAA,EAC/C,SAAS,GAAG;AACV,WAAO;AAAA,EACT;AACA,QAAM,IAAIA,MAAK;AAEf,MAAI,IAAI;AACR,MAAI,IAAI;AACR,MAAI,IAAI;AACR,MAAI,IAAI;AAER,SAAO,IAAI,GAAG,KAAK,GAAG;AACpB,SAAKA,MAAK,CAAC,IAAIA,MAAK,CAAC;AACrB,SAAKA,MAAK,IAAI,CAAC,IAAIA,MAAK,IAAI,CAAC;AAC7B,SAAKA,MAAK,IAAI,CAAC,IAAIA,MAAK,IAAI,CAAC;AAAA,EAC/B;AAEA,MAAI,aAAa,GAAG,CAAC;AACrB,MAAI,aAAa,GAAG,CAAC;AACrB,MAAI,aAAa,GAAG,CAAC;AAErB,SAAO,EAAE,GAAG,GAAG,EAAE;AACnB;AAEA,IAAM,eAAe,CAAC,GAAG,MAAM,KAAK,MAAM,KAAK,KAAK,KAAK,IAAI,EAAE,CAAC;AAEhE,IAAM,cAAc,CAAC,QAAQ,WAAW;AACtC,WAAS,UAAU,SAAS,cAAc,QAAQ;AAClD,SAAO,QAAQ,OAAO;AACtB,SAAO,SAAS,OAAO;AACvB,QAAM,MAAM,OAAO,WAAW,IAAI;AAClC,MAAI,UAAU,QAAQ,GAAG,CAAC;AAC1B,SAAO;AACT;AAEA,IAAM,iBAAiB,eAAa;AAClC,MAAI;AACJ,MAAI;AACF,SAAK,IAAI,UAAU,UAAU,OAAO,UAAU,MAAM;AAAA,EACtD,SAAS,GAAG;AACV,UAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,UAAM,MAAM,OAAO,WAAW,IAAI;AAClC,SAAK,IAAI,gBAAgB,UAAU,OAAO,UAAU,MAAM;AAAA,EAC5D;AACA,KAAG,KAAK,IAAI,IAAI,kBAAkB,UAAU,IAAI,CAAC;AACjD,SAAO;AACT;AAEA,IAAM,YAAY,SAChB,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/B,QAAM,MAAM,IAAI,MAAM;AACtB,MAAI,cAAc;AAClB,MAAI,SAAS,MAAM;AACjB,YAAQ,GAAG;AAAA,EACb;AACA,MAAI,UAAU,OAAK;AACjB,WAAO,CAAC;AAAA,EACV;AACA,MAAI,MAAM;AACZ,CAAC;AAEH,IAAM,yBAAyB,OAAK;AAElC,QAAM,cAAc,uBAAuB,CAAC;AAE5C,QAAM,YAAY,gBAAgB,CAAC;AAEnC,QAAM,EAAE,aAAa,IAAI,EAAE;AAE3B,QAAM,cAAc,CAAC,MAAM,QAAQ,WACjC,IAAI,QAAQ,aAAW;AAErB,QAAI,CAAC,KAAK,IAAI,WAAW;AACvB,WAAK,IAAI,YAAY,OAClB,WAAW,IAAI,EACf,aAAa,GAAG,GAAG,OAAO,OAAO,OAAO,MAAM;AAAA,IACnD;AAGA,UAAM,YAAY,eAAe,KAAK,IAAI,SAAS;AAEnD,QAAI,CAAC,UAAU,OAAO,WAAW,IAAI;AACnC,aAAO,WAAW,IAAI,EAAE,aAAa,WAAW,GAAG,CAAC;AACpD,aAAO,QAAQ;AAAA,IACjB;AAEA,UAAM,SAAS,aAAa,iBAAiB;AAC7C,WAAO;AAAA,MACL;AAAA,QACE;AAAA,QACA,aAAa;AAAA,MACf;AAAA,MACA,cAAY;AAEV,eAAO,WAAW,IAAI,EAAE,aAAa,UAAU,GAAG,CAAC;AAGnD,eAAO,UAAU;AAGjB,gBAAQ;AAAA,MACV;AAAA,MACA,CAAC,UAAU,KAAK,MAAM;AAAA,IACxB;AAAA,EACF,CAAC;AAEH,QAAM,kBAAkB,CAAC,MAAM,cAAc;AAC3C,SAAK,gBAAgB,SAAS;AAC9B,cAAU,MAAM,QAAQ;AACxB,cAAU,MAAM,SAAS;AACzB,cAAU,SAAS;AAAA,EACrB;AAGA,QAAM,aAAa,CAAC,EAAE,KAAK,MAAM;AAC/B,UAAM,YAAY,KAAK,IAAI,OAAO,MAAM;AACxC,cAAU,UAAU;AACpB,cAAU,aAAa;AACvB,SAAK,IAAI,aAAa,KAAK,SAAS;AACpC,WAAO;AAAA,EACT;AAGA,QAAM,YAAY,CAAC,EAAE,MAAM,OAAO,MAAM,MAAM;AAC5C,UAAM,KAAK,MAAM;AACjB,UAAM,OAAO,KAAK,MAAM,YAAY,EAAE,GAAG,CAAC;AAC1C,QAAI,CAAC,KAAM;AAEX,UAAM,OAAO,KAAK,YAAY,MAAM,KAAK;AAAA,MACvC,QAAQ;AAAA,QACN,GAAG;AAAA,QACH,GAAG;AAAA,MACL;AAAA,MACA,MAAM;AAAA,QACJ,YAAY;AAAA,QACZ,UAAU;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,MACN,UAAU;AAAA,MACV,aAAa;AAAA,IACf;AAEA,UAAM,aAAa,KAAK;AAAA,MACtB;AAAA,IACF;AAEA,QAAI;AACJ,QAAI;AACJ,QAAI,QAAQ;AACZ,QAAI,KAAK,MAAM,+BAA+B,GAAG;AAC/C,eAAS,KAAK,YAAY,QAAQ,KAAK,CAAC;AACxC,eAAS,KAAK,YAAY,QAAQ;AAClC,cAAQ;AAAA,IACV;AAGA,UAAM,YAAY,KAAK;AAAA,MACrB,KAAK,gBAAgB,WAAW;AAAA,QAC9B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,YAAY;AAAA,MACd,CAAC;AAAA,MACD,KAAK,WAAW;AAAA,IAClB;AACA,SAAK,IAAI,OAAO,KAAK,SAAS;AAG9B,cAAU,UAAU;AACpB,cAAU,SAAS;AACnB,cAAU,SAAS;AACnB,cAAU,aAAa;AAGvB,eAAW,MAAM;AACf,WAAK,SAAS,0BAA0B,EAAE,GAAG,CAAC;AAAA,IAChD,GAAG,GAAG;AAAA,EACR;AAEA,QAAMC,eAAc,CAAC,EAAE,MAAM,MAAM,MAAM;AACvC,UAAM,OAAO,KAAK,MAAM,YAAY,EAAE,IAAI,MAAM,GAAG,CAAC;AACpD,QAAI,CAAC,KAAM;AACX,UAAM,YAAY,KAAK,IAAI,OAAO,KAAK,IAAI,OAAO,SAAS,CAAC;AAC5D,cAAU,OAAO,KAAK,YAAY,MAAM;AACxC,cAAU,aAAa,KAAK;AAAA,MAC1B;AAAA,IACF;AACA,QAAI,KAAK,MAAM,+BAA+B,GAAG;AAC/C,gBAAU,QAAQ;AAClB,gBAAU,SAAS,KAAK,YAAY,QAAQ;AAC5C,gBAAU,SAAS,KAAK,YAAY,QAAQ;AAAA,IAC9C;AAAA,EACF;AAGA,QAAM,wBAAwB,CAAC,EAAE,MAAM,OAAO,OAAO,MAAM;AAEzD,QAAI,CAAC,4BAA4B,KAAK,OAAO,OAAO,GAAG,EAAG;AAG1D,QAAI,CAAC,KAAK,IAAI,OAAO,OAAQ;AAG7B,UAAM,OAAO,KAAK,MAAM,YAAY,EAAE,IAAI,MAAM,GAAG,CAAC;AACpD,QAAI,CAAC,KAAM;AAGX,QAAI,SAAS,KAAK,OAAO,OAAO,GAAG,GAAG;AACpC,YAAM,YAAY,KAAK,IAAI,OAAO,KAAK,IAAI,OAAO,SAAS,CAAC;AAC5D,kBAAY,MAAM,OAAO,OAAO,OAAO,UAAU,KAAK;AACtD;AAAA,IACF;AAEA,QAAI,qBAAqB,KAAK,OAAO,OAAO,GAAG,GAAG;AAChD,YAAM,OAAO,KAAK,YAAY,MAAM;AACpC,YAAM,QAAQ,KAAK,IAAI,OAAO,KAAK,IAAI,OAAO,SAAS,CAAC;AAGxD,UACE,QACA,KAAK,eACL,MAAM,QACN,MAAM,KAAK,eACX,KAAK,IAAI,KAAK,cAAc,MAAM,KAAK,WAAW,IAAI,MACtD;AACA,cAAM,YAAY,WAAW,EAAE,KAAK,CAAC;AACrC,kBAAU,EAAE,MAAM,OAAO,OAAO,YAAY,UAAU,KAAK,EAAE,CAAC;AAAA,MAChE,OAEK;AACH,QAAAA,aAAY,EAAE,MAAM,MAAM,CAAC;AAAA,MAC7B;AAAA,IACF;AAAA,EACF;AAEA,QAAM,uBAAuB,UAAQ;AAGnC,UAAM,YAAY,OAAO,UAAU;AACnC,UAAM,YAAY,UAAU,MAAM,qBAAqB;AACvD,UAAM,iBAAiB,YAAY,SAAS,UAAU,CAAC,CAAC,IAAI;AAC5D,QAAI,mBAAmB,QAAQ,kBAAkB,GAAI,QAAO;AAE5D,WAAO,uBAAuB,UAAU,SAAS,IAAI;AAAA,EACvD;AAKA,QAAM,4BAA4B,CAAC,EAAE,MAAM,MAAM,MAAM;AACrD,UAAM,EAAE,GAAG,IAAI;AAGf,UAAM,OAAO,KAAK,MAAM,YAAY,EAAE;AACtC,QAAI,CAAC,KAAM;AAGX,UAAM,UAAU,IAAI,gBAAgB,KAAK,IAAI;AAG7C,iBAAa,SAAS,CAAC,OAAO,WAAW;AAEvC,WAAK,SAAS,oCAAoC;AAAA,QAChD;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAEA,QAAM,cAAc,CAAC,EAAE,MAAM,MAAM,MAAM;AACvC,UAAM,EAAE,GAAG,IAAI;AAGf,UAAM,OAAO,KAAK,MAAM,YAAY,EAAE;AACtC,QAAI,CAAC,KAAM;AAGX,UAAM,UAAU,IAAI,gBAAgB,KAAK,IAAI;AAG7C,UAAM,sBAAsB,MAAM;AAEhC,gBAAU,OAAO,EAAE,KAAK,kBAAkB;AAAA,IAC5C;AAGA,UAAM,qBAAqB,eAAa;AAEtC,UAAI,gBAAgB,OAAO;AAI3B,YAAM,OAAO,KAAK,YAAY,MAAM,KAAK,CAAC;AAC1C,YAAM,cAAc,KAAK,eAAe;AAGxC,UAAI,EAAE,OAAO,OAAO,IAAI;AAGxB,UAAI,CAAC,SAAS,CAAC,OAAQ;AAEvB,UAAI,eAAe,KAAK,eAAe,GAAG;AACxC,SAAC,OAAO,MAAM,IAAI,CAAC,QAAQ,KAAK;AAAA,MAClC;AAIA,YAAM,qBAAqB,KAAK,IAAI,GAAG,OAAO,mBAAmB,IAAI;AAKrE,YAAM,aAAa,KAAK,MAAM,+BAA+B;AAG7D,YAAM,cAAc,aAAa;AAGjC,YAAM,oBAAoB,SAAS;AAGnC,YAAM,wBAAwB,KAAK,KAAK,QAAQ;AAChD,YAAM,yBAAyB,KAAK,KAAK,QAAQ;AAEjD,UAAI,aAAa;AACjB,UAAI,cAAc,aAAa;AAE/B,UAAI,oBAAoB,GAAG;AACzB,qBAAa,KAAK,IAAI,OAAO,wBAAwB,WAAW;AAChE,sBAAc,aAAa;AAAA,MAC7B,OAAO;AACL,sBAAc,KAAK,IAAI,QAAQ,yBAAyB,WAAW;AACnE,qBAAa,cAAc;AAAA,MAC7B;AAGA,YAAM,eAAe;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAGA,YAAM,OAAO,MAAM;AAEjB,cAAMC,gBAAe,KAAK;AAAA,UACxB;AAAA,QACF,IACI,sBAAsB,IAAI,IAC1B;AACJ,aAAK,YAAY,SAASA,eAAc,IAAI;AAG5C,YAAI,WAAW,WAAW;AACxB,oBAAU,MAAM;AAAA,QAClB;AAGA,aAAK,IAAI,cAAc,UAAU;AAGjC,kBAAU,EAAE,MAAM,OAAO,OAAO,aAAa,CAAC;AAAA,MAChD;AAGA,YAAM,SAAS,KAAK,YAAY,QAAQ;AACxC,UAAI,QAAQ;AACV,oBAAY,MAAM,QAAQ,YAAY,EAAE,KAAK,IAAI;AAAA,MACnD,OAAO;AACL,aAAK;AAAA,MACP;AAAA,IACF;AAGA,QAAI,qBAAqB,KAAK,IAAI,GAAG;AAEnC,YAAM,SAAS,aAAa,YAAY;AAExC,aAAO;AAAA,QACL;AAAA,UACE,MAAM,KAAK;AAAA,QACb;AAAA,QACA,iBAAe;AAEb,iBAAO,UAAU;AAIjB,cAAI,CAAC,aAAa;AAChB,gCAAoB;AACpB;AAAA,UACF;AAGA,6BAAmB,WAAW;AAAA,QAChC;AAAA,MACF;AAAA,IACF,OAAO;AAEL,0BAAoB;AAAA,IACtB;AAAA,EACF;AAKA,QAAM,iBAAiB,CAAC,EAAE,KAAK,MAAM;AAEnC,UAAM,QAAQ,KAAK,IAAI,OAAO,KAAK,IAAI,OAAO,SAAS,CAAC;AACxD,UAAM,aAAa;AACnB,UAAM,SAAS;AACf,UAAM,SAAS;AACf,UAAM,UAAU;AAAA,EAClB;AAKA,QAAM,iBAAiB,CAAC,EAAE,KAAK,MAAM;AACnC,SAAK,IAAI,cAAc,UAAU;AACjC,SAAK,IAAI,aAAa,UAAU;AAChC,SAAK,IAAI,eAAe,UAAU;AAAA,EACpC;AAEA,QAAM,gBAAgB,CAAC,EAAE,KAAK,MAAM;AAClC,SAAK,IAAI,cAAc,UAAU;AACjC,SAAK,IAAI,aAAa,UAAU;AAAA,EAClC;AAEA,QAAM,wBAAwB,CAAC,EAAE,KAAK,MAAM;AAC1C,SAAK,IAAI,cAAc,UAAU;AACjC,SAAK,IAAI,eAAe,UAAU;AAAA,EACpC;AAKA,QAAM,SAAS,CAAC,EAAE,KAAK,MAAM;AAE3B,SAAK,IAAI,SAAS,CAAC;AAGnB,SAAK,IAAI,YAAY;AAGrB,SAAK,IAAI,eAAe,CAAC;AAGzB,SAAK,IAAI,gBAAgB,KAAK;AAAA,MAC5B,KAAK,gBAAgB,aAAa;AAAA,QAChC,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAEA,SAAK,IAAI,iBAAiB,KAAK;AAAA,MAC7B,KAAK,gBAAgB,aAAa;AAAA,QAChC,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAEA,SAAK,IAAI,eAAe,KAAK;AAAA,MAC3B,KAAK,gBAAgB,aAAa;AAAA,QAChC,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO,EAAE,MAAM,WAAW;AAAA,IACxB,MAAM;AAAA,IACN;AAAA,IACA,QAAQ,CAAC,QAAQ;AAAA,IACjB,MAAM,CAAC,QAAQ;AAAA,IACf,SAAS,CAAC,EAAE,KAAK,MAAM;AAErB,WAAK,IAAI,OAAO,QAAQ,eAAa;AACnC,kBAAU,MAAM,QAAQ;AACxB,kBAAU,MAAM,SAAS;AAAA,MAC3B,CAAC;AAAA,IACH;AAAA,IACA,cAAc,CAAC,EAAE,KAAK,MAAM;AAC1B,WAAK,IAAI,OAAO,QAAQ,eAAa;AACnC,kBAAU,QAAQ;AAAA,MACpB,CAAC;AAAA,IACH;AAAA,IACA,OAAO,EAAE,MAAM;AAAA,MACb;AAAA;AAAA,QAEE,wBAAwB;AAAA,QACxB,oCAAoC;AAAA,QACpC,kCAAkC;AAAA,QAClC,0BAA0B;AAAA;AAAA,QAG1B,2BAA2B;AAAA,QAC3B,iCAAiC;AAAA,QACjC,wBAAwB;AAAA,QACxB,8BAA8B;AAAA,QAC9B,2BAA2B;AAAA,QAC3B,4BAA4B;AAAA,MAC9B;AAAA,MACA,CAAC,EAAE,KAAK,MAAM;AAEZ,cAAM,gBAAgB,KAAK,IAAI,aAAa;AAAA,UAC1C,eAAa,UAAU,YAAY;AAAA,QACrC;AAGA,aAAK,IAAI,eAAe,KAAK,IAAI,aAAa;AAAA,UAC5C,eAAa,UAAU,UAAU;AAAA,QACnC;AAGA,sBAAc,QAAQ,eAAa,gBAAgB,MAAM,SAAS,CAAC;AACnE,sBAAc,SAAS;AAAA,MACzB;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAKA,IAAM,SAAS,WAAS;AACtB,QAAM,EAAE,WAAW,MAAM,IAAI;AAC7B,QAAM,EAAE,MAAM,aAAa,OAAO,IAAI;AAGtC,QAAM,mBAAmB,uBAAuB,KAAK;AAGrD,YAAU,eAAe,aAAW;AAElC,UAAM,EAAE,IAAI,MAAM,MAAM,IAAI;AAG5B,QAAI,CAAC,GAAG,MAAM,KAAK,CAAC,MAAM,yBAAyB,EAAG;AAGtD,UAAM,cAAc,CAAC,EAAE,MAAM,MAAM,MAAM;AACvC,YAAM,EAAE,GAAG,IAAI;AACf,YAAM,OAAO,MAAM,YAAY,EAAE;AAGjC,UAAI,CAAC,QAAQ,CAAC,OAAO,KAAK,IAAI,KAAK,KAAK,SAAU;AAGlD,YAAM,OAAO,KAAK;AAGlB,UAAI,CAAC,mBAAmB,IAAI,EAAG;AAG/B,UAAI,CAAC,MAAM,+BAA+B,EAAE,IAAI,EAAG;AAInD,YAAM,4BAA4B,wBAAwB,UAAU,CAAC;AACrE,YAAM,qBAAqB,MAAM,iCAAiC;AAClE,UACE,CAAC,8BACA,sBAAsB,KAAK,OAAO;AAEnC;AAGF,WAAK,IAAI,eAAe,KAAK;AAAA,QAC3B,KAAK,gBAAgB,kBAAkB,EAAE,GAAG,CAAC;AAAA,MAC/C;AAGA,YAAM,qBAAqB,KAAK,MAAM,0BAA0B;AAChE,UAAI,oBAAoB;AACtB,aAAK,SAAS,2BAA2B;AAAA,UACvC,IAAI,KAAK;AAAA,UACT,QAAQ;AAAA,QACV,CAAC;AAAA,MACH;AAGA,YAAM,QACJ,CAAC,6BACD,KAAK,OAAO,MAAM,iDAAiD;AACrE,WAAK,SAAS,sCAAsC,EAAE,GAAG,GAAG,KAAK;AAAA,IACnE;AAEA,UAAM,cAAc,CAAC,MAAM,UAAU;AACnC,UAAI,CAAC,KAAK,IAAI,aAAc;AAE5B,UAAI,EAAE,GAAG,IAAI;AAGb,YAAM,OAAO,KAAK,MAAM,YAAY,EAAE,GAAG,CAAC;AAC1C,UAAI,CAAC,KAAM;AAGX,YAAM,mBAAmB,KAAK,MAAM,wBAAwB;AAC5D,YAAM,uBAAuB,KAAK,MAAM,6BAA6B;AACrE,YAAM,cAAc,KAAK,MAAM,0BAA0B;AACzD,UAAI,oBAAoB,wBAAwB,YAAa;AAG7D,UAAI,EAAE,YAAY,YAAY,IAAI,KAAK;AACvC,UAAI,CAAC,cAAc,CAAC,YAAa;AAGjC,YAAM,mBAAmB,KAAK,MAAM,8BAA8B;AAClE,YAAM,mBAAmB,KAAK,MAAM,8BAA8B;AAGlE,YAAM,OAAO,KAAK,YAAY,MAAM,KAAK,CAAC;AAC1C,YAAM,cAAc,KAAK,eAAe;AAGxC,UAAI,eAAe,KAAK,eAAe;AACrC,SAAC,YAAY,WAAW,IAAI,CAAC,aAAa,UAAU;AAGtD,UAAI,CAAC,SAAS,KAAK,IAAI,KAAK,KAAK,MAAM,2BAA2B,GAAG;AACnE,cAAM,SAAS,OAAO;AACtB,sBAAc;AACd,uBAAe;AAAA,MACjB;AAGA,YAAM,mBAAmB,cAAc;AAGvC,YAAM,sBACH,KAAK,YAAY,MAAM,KAAK,CAAC,GAAG,eAAe;AAGlD,UAAI,mBAAmB,KAAK;AAAA,QAC1B;AAAA,QACA,KAAK,IAAI,aAAa,gBAAgB;AAAA,MACxC;AACA,YAAM,YAAY,KAAK,KAAK,QAAQ;AACpC,YAAM,gBAAgB,KAAK;AAAA,QACzB,YAAY;AAAA,QACZ;AAAA,MACF;AAGA,WAAK,SAAS,2BAA2B;AAAA,QACvC,IAAI,KAAK;AAAA,QACT,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAEA,UAAM,gBAAgB,CAAC,EAAE,KAAK,MAAM;AAElC,WAAK,IAAI,gBAAgB;AAAA,IAC3B;AAEA,UAAM,wBAAwB,CAAC,EAAE,MAAM,OAAO,MAAM;AAClD,UAAI,OAAO,OAAO,QAAQ,OAAQ;AAGlC,WAAK,IAAI,gBAAgB;AAAA,IAC3B;AAEA,UAAM,0BAA0B,CAAC,EAAE,MAAM,OAAO,MAAM;AAEpD,WAAK,IAAI,aAAa,OAAO;AAC7B,WAAK,IAAI,cAAc,OAAO;AAG9B,WAAK,IAAI,gBAAgB;AACzB,WAAK,IAAI,oBAAoB;AAG7B,WAAK,SAAS,MAAM;AAAA,IACtB;AAGA,SAAK;AAAA,MACH;AAAA,QACE;AAAA,UACE,iBAAiB;AAAA,UACjB,iBAAiB;AAAA,UACjB,eAAe;AAAA,UACf,kCAAkC;AAAA,UAClC,0BAA0B;AAAA,QAC5B;AAAA,QACA,CAAC,EAAE,MAAM,MAAM,MAAM;AAEnB,cAAI,CAAC,KAAK,IAAI,aAAc;AAG5B,cAAI,KAAK,KAAK,QAAQ,OAAQ;AAG9B,cAAI,KAAK,IAAI,eAAe;AAC1B,wBAAY,MAAM,KAAK;AACvB,iBAAK,IAAI,gBAAgB;AAAA,UAC3B;AAEA,cAAI,KAAK,IAAI,mBAAmB;AAE9B,kCAAsB,MAAM;AAG1B,oCAAsB,MAAM;AAC1B,qBAAK,SAAS,oCAAoC;AAAA,kBAChD,IAAI,MAAM;AAAA,gBACZ,CAAC;AAAA,cACH,CAAC;AAAA,YACH,CAAC;AAED,iBAAK,IAAI,oBAAoB;AAAA,UAC/B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAGD,SAAO;AAAA,IACL,SAAS;AAAA;AAAA,MAEP,mBAAmB,CAAC,MAAM,KAAK,OAAO;AAAA;AAAA,MAGtC,wBAAwB,CAAC,MAAM,MAAM,KAAK,QAAQ;AAAA;AAAA,MAGlD,oBAAoB,CAAC,MAAM,KAAK,GAAG;AAAA;AAAA,MAGnC,uBAAuB,CAAC,IAAI,KAAK,GAAG;AAAA;AAAA,MAGpC,uBAAuB,CAAC,KAAK,KAAK,GAAG;AAAA;AAAA,MAGrC,yBAAyB,CAAC,MAAM,KAAK,GAAG;AAAA;AAAA,MAGxC,wBAAwB,CAAC,GAAG,KAAK,GAAG;AAAA;AAAA,MAGpC,qBAAqB,CAAC,OAAO,KAAK,OAAO;AAAA;AAAA,MAGzC,uCAAuC,CAAC,KAAS,KAAK,GAAG;AAAA;AAAA,MAGzD,mCAAmC,CAAC,MAAM,KAAK,MAAM;AAAA;AAAA,MAGrD,wCAAwC,CAAC,OAAO,KAAK,OAAO;AAAA;AAAA,MAG5D,wBAAwB,CAAC,MAAM,KAAK,OAAO;AAAA;AAAA,MAG3C,0BAA0B,CAAC,MAAM,MAAM,KAAK,QAAQ;AAAA,IACtD;AAAA,EACF;AACF;AAGA,IAAM,YACJ,OAAO,WAAW,eAAe,OAAO,OAAO,aAAa;AAC9D,IAAI,WAAW;AACb,WAAS;AAAA,IACP,IAAI,YAAY,yBAAyB,EAAE,QAAQ,OAAO,CAAC;AAAA,EAC7D;AACF;AAEA,IAAO,4CAAQ;",
  "names": ["size", "markup", "data", "updateImage", "averageColor"]
}
